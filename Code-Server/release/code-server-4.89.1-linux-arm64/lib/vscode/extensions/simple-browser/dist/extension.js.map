{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://simple-browser/./src/dispose.ts","webpack://simple-browser/./src/simpleBrowserManager.ts","webpack://simple-browser/./src/simpleBrowserView.ts","webpack://simple-browser/external commonjs \"vscode\"","webpack://simple-browser/webpack/bootstrap","webpack://simple-browser/./src/extension.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nexport function disposeAll(disposables: vscode.Disposable[]) {\n\twhile (disposables.length) {\n\t\tconst item = disposables.pop();\n\t\titem?.dispose();\n\t}\n}\n\nexport abstract class Disposable {\n\tprivate _isDisposed = false;\n\n\tprotected _disposables: vscode.Disposable[] = [];\n\n\tpublic dispose(): any {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isDisposed = true;\n\t\tdisposeAll(this._disposables);\n\t}\n\n\tprotected _register<T extends vscode.Disposable>(value: T): T {\n\t\tif (this._isDisposed) {\n\t\t\tvalue.dispose();\n\t\t} else {\n\t\t\tthis._disposables.push(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected get isDisposed() {\n\t\treturn this._isDisposed;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { ShowOptions, SimpleBrowserView } from './simpleBrowserView';\n\nexport class SimpleBrowserManager {\n\n\tprivate _activeView?: SimpleBrowserView;\n\n\tconstructor(\n\t\tprivate readonly extensionUri: vscode.Uri,\n\t) { }\n\n\tdispose() {\n\t\tthis._activeView?.dispose();\n\t\tthis._activeView = undefined;\n\t}\n\n\tpublic show(inputUri: string | vscode.Uri, options?: ShowOptions): void {\n\t\tconst url = typeof inputUri === 'string' ? inputUri : inputUri.toString(true);\n\t\tif (this._activeView) {\n\t\t\tthis._activeView.show(url, options);\n\t\t} else {\n\t\t\tconst view = SimpleBrowserView.create(this.extensionUri, url, options);\n\t\t\tthis.registerWebviewListeners(view);\n\n\t\t\tthis._activeView = view;\n\t\t}\n\t}\n\n\tpublic restore(panel: vscode.WebviewPanel, state: any): void {\n\t\tconst url = state?.url ?? '';\n\t\tconst view = SimpleBrowserView.restore(this.extensionUri, url, panel);\n\t\tthis.registerWebviewListeners(view);\n\t\tthis._activeView ??= view;\n\t}\n\n\tprivate registerWebviewListeners(view: SimpleBrowserView) {\n\t\tview.onDispose(() => {\n\t\t\tif (this._activeView === view) {\n\t\t\t\tthis._activeView = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { Disposable } from './dispose';\n\n\nexport interface ShowOptions {\n\treadonly preserveFocus?: boolean;\n\treadonly viewColumn?: vscode.ViewColumn;\n}\n\nexport class SimpleBrowserView extends Disposable {\n\n\tpublic static readonly viewType = 'simpleBrowser.view';\n\tprivate static readonly title = vscode.l10n.t(\"Simple Browser\");\n\n\tprivate static getWebviewLocalResourceRoots(extensionUri: vscode.Uri): readonly vscode.Uri[] {\n\t\treturn [\n\t\t\tvscode.Uri.joinPath(extensionUri, 'media')\n\t\t];\n\t}\n\n\tprivate static getWebviewOptions(extensionUri: vscode.Uri): vscode.WebviewOptions {\n\t\treturn {\n\t\t\tenableScripts: true,\n\t\t\tenableForms: true,\n\t\t\tlocalResourceRoots: SimpleBrowserView.getWebviewLocalResourceRoots(extensionUri),\n\t\t};\n\t}\n\n\tprivate readonly _webviewPanel: vscode.WebviewPanel;\n\n\tprivate readonly _onDidDispose = this._register(new vscode.EventEmitter<void>());\n\tpublic readonly onDispose = this._onDidDispose.event;\n\n\tpublic static create(\n\t\textensionUri: vscode.Uri,\n\t\turl: string,\n\t\tshowOptions?: ShowOptions\n\t): SimpleBrowserView {\n\t\tconst webview = vscode.window.createWebviewPanel(SimpleBrowserView.viewType, SimpleBrowserView.title, {\n\t\t\tviewColumn: showOptions?.viewColumn ?? vscode.ViewColumn.Active,\n\t\t\tpreserveFocus: showOptions?.preserveFocus\n\t\t}, {\n\t\t\tretainContextWhenHidden: true,\n\t\t\t...SimpleBrowserView.getWebviewOptions(extensionUri)\n\t\t});\n\t\treturn new SimpleBrowserView(extensionUri, url, webview);\n\t}\n\n\tpublic static restore(\n\t\textensionUri: vscode.Uri,\n\t\turl: string,\n\t\twebviewPanel: vscode.WebviewPanel,\n\t): SimpleBrowserView {\n\t\treturn new SimpleBrowserView(extensionUri, url, webviewPanel);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly extensionUri: vscode.Uri,\n\t\turl: string,\n\t\twebviewPanel: vscode.WebviewPanel,\n\t) {\n\t\tsuper();\n\n\t\tthis._webviewPanel = this._register(webviewPanel);\n\t\tthis._webviewPanel.webview.options = SimpleBrowserView.getWebviewOptions(extensionUri);\n\n\t\tthis._register(this._webviewPanel.webview.onDidReceiveMessage(e => {\n\t\t\tswitch (e.type) {\n\t\t\t\tcase 'openExternal':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst url = vscode.Uri.parse(e.url);\n\t\t\t\t\t\tvscode.env.openExternal(url);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Noop\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._webviewPanel.onDidDispose(() => {\n\t\t\tthis.dispose();\n\t\t}));\n\n\t\tthis._register(vscode.workspace.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('simpleBrowser.focusLockIndicator.enabled')) {\n\t\t\t\tconst configuration = vscode.workspace.getConfiguration('simpleBrowser');\n\t\t\t\tthis._webviewPanel.webview.postMessage({\n\t\t\t\t\ttype: 'didChangeFocusLockIndicatorEnabled',\n\t\t\t\t\tfocusLockEnabled: configuration.get<boolean>('focusLockIndicator.enabled', true)\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tthis.show(url);\n\t}\n\n\tpublic override dispose() {\n\t\tthis._onDidDispose.fire();\n\t\tsuper.dispose();\n\t}\n\n\tpublic show(url: string, options?: ShowOptions) {\n\t\tthis._webviewPanel.webview.html = this.getHtml(url);\n\t\tthis._webviewPanel.reveal(options?.viewColumn, options?.preserveFocus);\n\t}\n\n\tprivate getHtml(url: string) {\n\t\tconst configuration = vscode.workspace.getConfiguration('simpleBrowser');\n\n\t\tconst nonce = getNonce();\n\n\t\tconst mainJs = this.extensionResourceUrl('media', 'index.js');\n\t\tconst mainCss = this.extensionResourceUrl('media', 'main.css');\n\t\tconst codiconsUri = this.extensionResourceUrl('media', 'codicon.css');\n\n\t\treturn /* html */ `<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"\n\t\t\t\t\tdefault-src 'none';\n\t\t\t\t\tfont-src data:;\n\t\t\t\t\tstyle-src ${this._webviewPanel.webview.cspSource};\n\t\t\t\t\tscript-src 'nonce-${nonce}';\n\t\t\t\t\tframe-src *;\n\t\t\t\t\t\">\n\n\t\t\t\t<meta id=\"simple-browser-settings\" data-settings=\"${escapeAttribute(JSON.stringify({\n\t\t\turl: url,\n\t\t\tfocusLockEnabled: configuration.get<boolean>('focusLockIndicator.enabled', true)\n\t\t}))}\">\n\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${mainCss}\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${codiconsUri}\">\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<header class=\"header\">\n\t\t\t\t\t<nav class=\"controls\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttitle=\"${vscode.l10n.t(\"Back\")}\"\n\t\t\t\t\t\t\tclass=\"back-button icon\"><i class=\"codicon codicon-arrow-left\"></i></button>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttitle=\"${vscode.l10n.t(\"Forward\")}\"\n\t\t\t\t\t\t\tclass=\"forward-button icon\"><i class=\"codicon codicon-arrow-right\"></i></button>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttitle=\"${vscode.l10n.t(\"Reload\")}\"\n\t\t\t\t\t\t\tclass=\"reload-button icon\"><i class=\"codicon codicon-refresh\"></i></button>\n\t\t\t\t\t</nav>\n\n\t\t\t\t\t<input class=\"url-input\" type=\"text\">\n\n\t\t\t\t\t<nav class=\"controls\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttitle=\"${vscode.l10n.t(\"Open in browser\")}\"\n\t\t\t\t\t\t\tclass=\"open-external-button icon\"><i class=\"codicon codicon-link-external\"></i></button>\n\t\t\t\t\t</nav>\n\t\t\t\t</header>\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t<div class=\"iframe-focused-alert\">${vscode.l10n.t(\"Focus Lock\")}</div>\n\t\t\t\t\t<iframe sandbox=\"allow-scripts allow-forms allow-same-origin allow-downloads\"></iframe>\n\t\t\t\t</div>\n\n\t\t\t\t<script src=\"${mainJs}\" nonce=\"${nonce}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n\t}\n\n\tprivate extensionResourceUrl(...parts: string[]): vscode.Uri {\n\t\treturn this._webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this.extensionUri, ...parts));\n\t}\n}\n\nfunction escapeAttribute(value: string | vscode.Uri): string {\n\treturn value.toString().replace(/\"/g, '&quot;');\n}\n\nfunction getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 64; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { SimpleBrowserManager } from './simpleBrowserManager';\nimport { SimpleBrowserView } from './simpleBrowserView';\n\ndeclare class URL {\n\tconstructor(input: string, base?: string | URL);\n\thostname: string;\n}\n\nconst openApiCommand = 'simpleBrowser.api.open';\nconst showCommand = 'simpleBrowser.show';\n\nconst enabledHosts = new Set<string>([\n\t'localhost',\n\t// localhost IPv4\n\t'127.0.0.1',\n\t// localhost IPv6\n\t'[0:0:0:0:0:0:0:1]',\n\t'[::1]',\n\t// all interfaces IPv4\n\t'0.0.0.0',\n\t// all interfaces IPv6\n\t'[0:0:0:0:0:0:0:0]',\n\t'[::]'\n]);\n\nconst openerId = 'simpleBrowser.open';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst manager = new SimpleBrowserManager(context.extensionUri);\n\tcontext.subscriptions.push(manager);\n\n\tcontext.subscriptions.push(vscode.window.registerWebviewPanelSerializer(SimpleBrowserView.viewType, {\n\t\tdeserializeWebviewPanel: async (panel, state) => {\n\t\t\tmanager.restore(panel, state);\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand(showCommand, async (url?: string) => {\n\t\tif (!url) {\n\t\t\turl = await vscode.window.showInputBox({\n\t\t\t\tplaceHolder: vscode.l10n.t(\"https://example.com\"),\n\t\t\t\tprompt: vscode.l10n.t(\"Enter url to visit\")\n\t\t\t});\n\t\t}\n\n\t\tif (url) {\n\t\t\tmanager.show(url);\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand(openApiCommand, (url: vscode.Uri, showOptions?: {\n\t\tpreserveFocus?: boolean;\n\t\tviewColumn: vscode.ViewColumn;\n\t}) => {\n\t\tmanager.show(url, showOptions);\n\t}));\n\n\tcontext.subscriptions.push(vscode.window.registerExternalUriOpener(openerId, {\n\t\tcanOpenExternalUri(uri: vscode.Uri) {\n\t\t\t// We have to replace the IPv6 hosts with IPv4 because URL can't handle IPv6.\n\t\t\tconst originalUri = new URL(uri.toString(true));\n\t\t\tif (enabledHosts.has(originalUri.hostname)) {\n\t\t\t\treturn isWeb()\n\t\t\t\t\t? vscode.ExternalUriOpenerPriority.Default\n\t\t\t\t\t: vscode.ExternalUriOpenerPriority.Option;\n\t\t\t}\n\n\t\t\treturn vscode.ExternalUriOpenerPriority.None;\n\t\t},\n\t\topenExternalUri(resolveUri: vscode.Uri) {\n\t\t\treturn manager.show(resolveUri, {\n\t\t\t\tviewColumn: vscode.window.activeTextEditor ? vscode.ViewColumn.Beside : vscode.ViewColumn.Active\n\t\t\t});\n\t\t}\n\t}, {\n\t\tschemes: ['http', 'https'],\n\t\tlabel: vscode.l10n.t(\"Open in simple browser\"),\n\t}));\n}\n\nfunction isWeb(): boolean {\n\t// @ts-expect-error\n\treturn typeof navigator !== 'undefined' && vscode.env.uiKind === vscode.UIKind.Web;\n}\n"],"names":["disposeAll","disposables","length","item","pop","dispose","_isDisposed","_disposables","this","_register","value","push","isDisposed","constructor","extensionUri","_activeView","undefined","show","inputUri","options","url","toString","view","SimpleBrowserView","create","registerWebviewListeners","restore","panel","state","onDispose","Disposable","getWebviewLocalResourceRoots","vscode","Uri","joinPath","getWebviewOptions","enableScripts","enableForms","localResourceRoots","showOptions","webview","window","createWebviewPanel","viewType","title","viewColumn","ViewColumn","Active","preserveFocus","retainContextWhenHidden","webviewPanel","super","_onDidDispose","EventEmitter","event","_webviewPanel","onDidReceiveMessage","e","type","parse","env","openExternal","onDidDispose","workspace","onDidChangeConfiguration","affectsConfiguration","configuration","getConfiguration","postMessage","focusLockEnabled","get","fire","html","getHtml","reveal","nonce","text","possible","i","charAt","Math","floor","random","getNonce","mainJs","extensionResourceUrl","mainCss","codiconsUri","cspSource","JSON","stringify","replace","l10n","t","parts","asWebviewUri","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","manager","SimpleBrowserManager","subscriptions","registerWebviewPanelSerializer","deserializeWebviewPanel","async","commands","registerCommand","showCommand","showInputBox","placeHolder","prompt","openApiCommand","registerExternalUriOpener","openerId","canOpenExternalUri","uri","originalUri","URL","enabledHosts","has","hostname","navigator","uiKind","UIKind","Web","ExternalUriOpenerPriority","Default","Option","None","openExternalUri","resolveUri","activeTextEditor","Beside","schemes","label","Set"],"sourceRoot":""}