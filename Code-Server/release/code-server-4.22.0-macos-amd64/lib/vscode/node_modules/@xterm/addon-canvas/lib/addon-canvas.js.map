{"version":3,"file":"addon-canvas.js","mappings":"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G,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAG7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAC7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EAAG,IAG7B,IAAK,CAAC,CAAEnH,EAAG,EAAGC,EAAG,EAAGiH,EAAG,EAAGC,EA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","sources":["webpack://CanvasAddon/webpack/universalModuleDefinition","webpack://CanvasAddon/./src/BaseRenderLayer.ts","webpack://CanvasAddon/./src/CanvasRenderer.ts","webpack://CanvasAddon/./src/CursorRenderLayer.ts","webpack://CanvasAddon/./src/GridCache.ts","webpack://CanvasAddon/./src/LinkRenderLayer.ts","webpack://CanvasAddon/./src/SelectionRenderLayer.ts","webpack://CanvasAddon/./src/TextRenderLayer.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CellColorResolver.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CharAtlasCache.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CharAtlasUtils.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/Constants.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CursorBlinkStateManager.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CustomGlyphs.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/DevicePixelObserver.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/RendererUtils.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/SelectionRenderModel.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/TextureAtlas.ts","webpack://CanvasAddon/../../src/browser/services/CharacterJoinerService.ts","webpack://CanvasAddon/../../src/common/Color.ts","webpack://CanvasAddon/../../src/common/EventEmitter.ts","webpack://CanvasAddon/../../src/common/Lifecycle.ts","webpack://CanvasAddon/../../src/common/MultiKeyMap.ts","webpack://CanvasAddon/../../src/common/Platform.ts","webpack://CanvasAddon/../../src/common/TaskQueue.ts","webpack://CanvasAddon/../../src/common/buffer/AttributeData.ts","webpack://CanvasAddon/../../src/common/buffer/CellData.ts","webpack://CanvasAddon/../../src/common/buffer/Constants.ts","webpack://CanvasAddon/../../src/common/input/TextDecoder.ts","webpack://CanvasAddon/../../src/common/services/LogService.ts","webpack://CanvasAddon/../../src/common/services/ServiceRegistry.ts","webpack://CanvasAddon/../../src/common/services/Services.ts","webpack://CanvasAddon/webpack/bootstrap","webpack://CanvasAddon/./src/CanvasAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasAddon\"] = factory();\n\telse\n\t\troot[\"CanvasAddon\"] = factory();\n})(self, () => {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ReadonlyColorSet } from 'browser/Types';\nimport { CellColorResolver } from 'browser/renderer/shared/CellColorResolver';\nimport { acquireTextureAtlas } from 'browser/renderer/shared/CharAtlasCache';\nimport { TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { createSelectionRenderModel } from 'browser/renderer/shared/SelectionRenderModel';\nimport { IRasterizedGlyph, IRenderDimensions, ISelectionRenderModel, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { isSafari } from 'common/Platform';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { IRenderLayer } from './Types';\n\nexport abstract class BaseRenderLayer extends Disposable implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _deviceCharWidth: number = 0;\n  private _deviceCharHeight: number = 0;\n  private _deviceCellWidth: number = 0;\n  private _deviceCellHeight: number = 0;\n  private _deviceCharLeft: number = 0;\n  private _deviceCharTop: number = 0;\n\n  protected _selectionModel: ISelectionRenderModel = createSelectionRenderModel();\n  private _cellColorResolver: CellColorResolver;\n  private _bitmapGenerator: (BitmapGenerator | undefined)[] = [];\n\n  protected _charAtlas!: ITextureAtlas;\n  protected _charAtlasDisposable = this.register(new MutableDisposable());\n\n  public get canvas(): HTMLCanvasElement { return this._canvas; }\n  public get cacheCanvas(): HTMLCanvasElement { return this._charAtlas?.pages[0].canvas!; }\n\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected readonly _themeService: IThemeService,\n    protected readonly _bufferService: IBufferService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _decorationService: IDecorationService,\n    protected readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n    this._cellColorResolver = new CellColorResolver(this._terminal, this._optionsService, this._selectionModel, this._decorationService, this._coreBrowserService, this._themeService);\n    this._canvas = this._coreBrowserService.mainDocument.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n    this._refreshCharAtlas(this._themeService.colors);\n    this.register(this._themeService.onChangeColors(e => {\n      this._refreshCharAtlas(e);\n      this.reset();\n      // Trigger selection changed as it's handled separately to regular rendering\n      this.handleSelectionChanged(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\n    }));\n\n    this.register(toDisposable(() => {\n      this._canvas.remove();\n    }));\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public handleBlur(): void {}\n  public handleFocus(): void {}\n  public handleCursorMove(): void {}\n  public handleGridChanged(startRow: number, endRow: number): void {}\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._selectionModel.update((this._terminal as any)._core, start, end, columnSelectMode);\n  }\n\n  protected _setTransparency(alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(this._themeService.colors);\n    this.handleGridChanged(0, this._bufferService.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(colorSet: ReadonlyColorSet): void {\n    if (this._deviceCharWidth <= 0 && this._deviceCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireTextureAtlas(this._terminal, this._optionsService.rawOptions, colorSet, this._deviceCellWidth, this._deviceCellHeight, this._deviceCharWidth, this._deviceCharHeight, this._coreBrowserService.dpr);\n    this._charAtlasDisposable.value = forwardEvent(this._charAtlas.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas);\n    this._charAtlas.warmUp();\n    for (let i = 0; i < this._charAtlas.pages.length; i++) {\n      this._bitmapGenerator[i] = new BitmapGenerator(this._charAtlas.pages[i].canvas);\n    }\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    this._deviceCellWidth = dim.device.cell.width;\n    this._deviceCellHeight = dim.device.cell.height;\n    this._deviceCharWidth = dim.device.char.width;\n    this._deviceCharHeight = dim.device.char.height;\n    this._deviceCharLeft = dim.device.char.left;\n    this._deviceCharTop = dim.device.char.top;\n    this._canvas.width = dim.device.canvas.width;\n    this._canvas.height = dim.device.canvas.height;\n    this._canvas.style.width = `${dim.css.canvas.width}px`;\n    this._canvas.style.height = `${dim.css.canvas.height}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(this._themeService.colors);\n  }\n\n  public abstract reset(): void;\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clearTexture();\n  }\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      y * this._deviceCellHeight,\n      width * this._deviceCellWidth,\n      height * this._deviceCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\n    const cellOffset = Math.ceil(this._deviceCellHeight * 0.5);\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      (y + 1) * this._deviceCellHeight - cellOffset - this._coreBrowserService.dpr,\n      width * this._deviceCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1, pixelOffset: number = 0): void {\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      (y + 1) * this._deviceCellHeight + pixelOffset - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\n      width * this._deviceCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  protected _curlyUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    for (let xOffset = 0; xOffset < width; xOffset++) {\n      const xLeft = (x + xOffset) * this._deviceCellWidth;\n      const xMid = (x + xOffset + 0.5) * this._deviceCellWidth;\n      const xRight = (x + xOffset + 1) * this._deviceCellWidth;\n      const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\n      const yMidBot = yMid - lineWidth;\n      const yMidTop = yMid + lineWidth;\n      this._ctx.moveTo(xLeft, yMid);\n      this._ctx.bezierCurveTo(\n        xLeft, yMidBot,\n        xMid, yMidBot,\n        xMid, yMid\n      );\n      this._ctx.bezierCurveTo(\n        xMid, yMidTop,\n        xRight, yMidTop,\n        xRight, yMid\n      );\n    }\n    this._ctx.stroke();\n    this._ctx.restore();\n  }\n\n  protected _dottedUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.setLineDash([lineWidth * 2, lineWidth]);\n    const xLeft = x * this._deviceCellWidth;\n    const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\n    this._ctx.moveTo(xLeft, yMid);\n    for (let xOffset = 0; xOffset < width; xOffset++) {\n      // const xLeft = x * this._deviceCellWidth;\n      const xRight = (x + width + xOffset) * this._deviceCellWidth;\n      this._ctx.lineTo(xRight, yMid);\n    }\n    this._ctx.stroke();\n    this._ctx.closePath();\n    this._ctx.restore();\n  }\n\n  protected _dashedUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.setLineDash([lineWidth * 4, lineWidth * 3]);\n    const xLeft = x * this._deviceCellWidth;\n    const xRight = (x + width) * this._deviceCellWidth;\n    const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\n    this._ctx.moveTo(xLeft, yMid);\n    this._ctx.lineTo(xRight, yMid);\n    this._ctx.stroke();\n    this._ctx.closePath();\n    this._ctx.restore();\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._deviceCellWidth,\n      y * this._deviceCellHeight,\n      this._coreBrowserService.dpr * width,\n      this._deviceCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.strokeRect(\n      x * this._deviceCellWidth + lineWidth / 2,\n      y * this._deviceCellHeight + (lineWidth / 2),\n      width * this._deviceCellWidth - lineWidth,\n      (height * this._deviceCellHeight) - lineWidth);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n      this._ctx.fillRect(\n        x * this._deviceCellWidth,\n        y * this._deviceCellHeight,\n        width * this._deviceCellWidth,\n        height * this._deviceCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(y);\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._deviceCellWidth, y * this._deviceCellHeight, this._deviceCellWidth, this._deviceCellHeight, this._optionsService.rawOptions.fontSize, this._coreBrowserService.dpr);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._deviceCellWidth + this._deviceCharLeft,\n        y * this._deviceCellHeight + this._deviceCharTop + this._deviceCharHeight);\n    }\n  }\n\n  /**\n   * Draws one or more characters at a cell. If possible this will draw using\n   * the character atlas to reduce draw time.\n   */\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\n    const chars = cell.getChars();\n    this._cellColorResolver.resolve(cell, x, this._bufferService.buffer.ydisp + y, this._deviceCellWidth);\n\n    if (!this._charAtlas) {\n      return;\n    }\n\n    let glyph: IRasterizedGlyph;\n    if (chars && chars.length > 1) {\n      glyph = this._charAtlas.getRasterizedGlyphCombinedChar(chars, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext, true);\n    } else {\n      glyph = this._charAtlas.getRasterizedGlyph(cell.getCode() || WHITESPACE_CELL_CODE, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext, true);\n    }\n    if (!glyph.size.x || !glyph.size.y) {\n      return;\n    }\n    this._ctx.save();\n    this._clipRow(y);\n\n    // Draw the image, use the bitmap if it's available\n\n    // HACK: If the canvas doesn't match, delete the generator. It's not clear how this happens but\n    // something is wrong with either the lifecycle of _bitmapGenerator or the page canvases are\n    // swapped out unexpectedly\n    if (this._bitmapGenerator[glyph.texturePage] && this._charAtlas.pages[glyph.texturePage].canvas !== this._bitmapGenerator[glyph.texturePage]!.canvas) {\n      this._bitmapGenerator[glyph.texturePage]?.bitmap?.close();\n      delete this._bitmapGenerator[glyph.texturePage];\n    }\n\n    if (this._charAtlas.pages[glyph.texturePage].version !== this._bitmapGenerator[glyph.texturePage]?.version) {\n      if (!this._bitmapGenerator[glyph.texturePage]) {\n        this._bitmapGenerator[glyph.texturePage] = new BitmapGenerator(this._charAtlas.pages[glyph.texturePage].canvas);\n      }\n      this._bitmapGenerator[glyph.texturePage]!.refresh();\n      this._bitmapGenerator[glyph.texturePage]!.version = this._charAtlas.pages[glyph.texturePage].version;\n    }\n    this._ctx.drawImage(\n      this._bitmapGenerator[glyph.texturePage]?.bitmap || this._charAtlas!.pages[glyph.texturePage].canvas,\n      glyph.texturePosition.x,\n      glyph.texturePosition.y,\n      glyph.size.x,\n      glyph.size.y,\n      x * this._deviceCellWidth + this._deviceCharLeft - glyph.offset.x,\n      y * this._deviceCellHeight + this._deviceCharTop - glyph.offset.y,\n      glyph.size.x,\n      glyph.size.y\n    );\n    this._ctx.restore();\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param y The row to clip.\n   */\n  private _clipRow(y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._deviceCellHeight,\n      this._bufferService.cols * this._deviceCellWidth,\n      this._deviceCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * this._coreBrowserService.dpr}px ${this._optionsService.rawOptions.fontFamily}`;\n  }\n}\n\n/**\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\n * the operation as window.createImageBitmap is asynchronous.\n */\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\n\nconst enum BitmapGeneratorState {\n  IDLE = 0,\n  GENERATING = 1,\n  GENERATING_INVALID = 2\n}\n\nclass BitmapGenerator {\n  private _state: BitmapGeneratorState = BitmapGeneratorState.IDLE;\n  private _commitTimeout: number | undefined = undefined;\n  private _bitmap: ImageBitmap | undefined = undefined;\n  public get bitmap(): ImageBitmap | undefined { return this._bitmap; }\n  public version: number = -1;\n\n  constructor(public readonly canvas: HTMLCanvasElement) {\n  }\n\n  public refresh(): void {\n    // Clear the bitmap immediately as it's stale\n    this._bitmap?.close();\n    this._bitmap = undefined;\n    // Disable ImageBitmaps on Safari because of https://bugs.webkit.org/show_bug.cgi?id=149990\n    if (isSafari) {\n      return;\n    }\n    if (this._commitTimeout === undefined) {\n      this._commitTimeout = window.setTimeout(() => this._generate(), GLYPH_BITMAP_COMMIT_DELAY);\n    }\n    if (this._state === BitmapGeneratorState.GENERATING) {\n      this._state = BitmapGeneratorState.GENERATING_INVALID;\n    }\n  }\n\n  private _generate(): void {\n    if (this._state === BitmapGeneratorState.IDLE) {\n      this._bitmap?.close();\n      this._bitmap = undefined;\n      this._state = BitmapGeneratorState.GENERATING;\n      window.createImageBitmap(this.canvas).then(bitmap => {\n        if (this._state === BitmapGeneratorState.GENERATING_INVALID) {\n          this.refresh();\n        } else {\n          this._bitmap = bitmap;\n        }\n        this._state = BitmapGeneratorState.IDLE;\n      });\n      if (this._commitTimeout) {\n        this._commitTimeout = undefined;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2 } from 'browser/Types';\nimport { removeTerminalFromCache } from 'browser/renderer/shared/CharAtlasCache';\nimport { observeDevicePixelDimensions } from 'browser/renderer/shared/DevicePixelObserver';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { CursorRenderLayer } from './CursorRenderLayer';\nimport { LinkRenderLayer } from './LinkRenderLayer';\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\nimport { TextRenderLayer } from './TextRenderLayer';\nimport { IRenderLayer } from './Types';\n\nexport class CanvasRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _devicePixelRatio: number;\n  private _observerDisposable = this.register(new MutableDisposable());\n\n  public dimensions: IRenderDimensions;\n\n  private readonly _onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>());\n  public readonly onRequestRedraw = this._onRequestRedraw.event;\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _screenElement: HTMLElement,\n    linkifier2: ILinkifier2,\n    private readonly _bufferService: IBufferService,\n    private readonly _charSizeService: ICharSizeService,\n    private readonly _optionsService: IOptionsService,\n    characterJoinerService: ICharacterJoinerService,\n    coreService: ICoreService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService,\n    private readonly _themeService: IThemeService\n  ) {\n    super();\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\n    this._renderLayers = [\n      new TextRenderLayer(this._terminal, this._screenElement, 0, allowTransparency, this._bufferService, this._optionsService, characterJoinerService, decorationService, this._coreBrowserService, _themeService),\n      new SelectionRenderLayer(this._terminal, this._screenElement, 1, this._bufferService, this._coreBrowserService, decorationService, this._optionsService, _themeService),\n      new LinkRenderLayer(this._terminal, this._screenElement, 2, linkifier2, this._bufferService, this._optionsService, decorationService, this._coreBrowserService, _themeService),\n      new CursorRenderLayer(this._terminal, this._screenElement, 3, this._onRequestRedraw, this._bufferService, this._optionsService, coreService, this._coreBrowserService, decorationService, _themeService)\n    ];\n    for (const layer of this._renderLayers) {\n      forwardEvent(layer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas);\n    }\n    this.dimensions = createRenderDimensions();\n    this._devicePixelRatio = this._coreBrowserService.dpr;\n    this._updateDimensions();\n\n    this._observerDisposable.value = observeDevicePixelDimensions(this._renderLayers[0].canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h));\n    this.register(this._coreBrowserService.onWindowChange(w => {\n      this._observerDisposable.value = observeDevicePixelDimensions(this._renderLayers[0].canvas, w, (w, h) => this._setCanvasDevicePixelDimensions(w, h));\n    }));\n\n    this.register(toDisposable(() => {\n      for (const l of this._renderLayers) {\n        l.dispose();\n      }\n      removeTerminalFromCache(this._terminal);\n    }));\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderLayers[0].cacheCanvas;\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\n      this._devicePixelRatio = this._coreBrowserService.dpr;\n      this.handleResize(this._bufferService.cols, this._bufferService.rows);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n\n    // Resize the screen\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\n  }\n\n  public handleCharSizeChanged(): void {\n    this.handleResize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public handleBlur(): void {\n    this._runOperation(l => l.handleBlur());\n  }\n\n  public handleFocus(): void {\n    this._runOperation(l => l.handleFocus());\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._runOperation(l => l.handleSelectionChanged(start, end, columnSelectMode));\n    // Selection foreground requires a full re-render\n    if (this._themeService.colors.selectionForeground) {\n      this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n    }\n  }\n\n  public handleCursorMove(): void {\n    this._runOperation(l => l.handleCursorMove());\n  }\n\n  public clear(): void {\n    this._runOperation(l => l.reset());\n  }\n\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\n    for (const l of this._renderLayers) {\n      operation(l);\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  public renderRows(start: number, end: number): void {\n    for (const l of this._renderLayers) {\n      l.handleGridChanged(start, end);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    for (const layer of this._renderLayers) {\n      layer.clearTextureAtlas();\n    }\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    if (!this._charSizeService.hasValidSize) {\n      return;\n    }\n\n    // See the WebGL renderer for an explanation of this section.\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.device.char.width = Math.floor(this._charSizeService.width * dpr);\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.device.char.top = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.device.cell.height - this.dimensions.device.char.height) / 2);\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.device.char.left = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n    this.dimensions.device.canvas.height = this._bufferService.rows * this.dimensions.device.cell.height;\n    this.dimensions.device.canvas.width = this._bufferService.cols * this.dimensions.device.cell.width;\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    this.dimensions.device.canvas.height = height;\n    this.dimensions.device.canvas.width = width;\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CursorBlinkStateManager } from 'browser/renderer/shared/CursorBlinkStateManager';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { MutableDisposable } from 'common/Lifecycle';\nimport { isFirefox } from 'common/Platform';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: MutableDisposable<CursorBlinkStateManager> = this.register(new MutableDisposable());\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    private readonly _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    private readonly _coreService: ICoreService,\n    coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'cursor', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this),\n      'outline': this._renderOutlineCursor.bind(this)\n    };\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this._handleOptionsChanged();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager.value?.restartBlinkAnimation();\n    this._handleOptionsChanged();\n  }\n\n  public handleBlur(): void {\n    this._cursorBlinkStateManager.value?.pause();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public handleFocus(): void {\n    this._cursorBlinkStateManager.value?.resume();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  private _handleOptionsChanged(): void {\n    if (this._optionsService.rawOptions.cursorBlink) {\n      if (!this._cursorBlinkStateManager.value) {\n        this._cursorBlinkStateManager.value = new CursorBlinkStateManager(() => this._render(true), this._coreBrowserService);\n      }\n    } else {\n      this._cursorBlinkStateManager.clear();\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public handleCursorMove(): void {\n    this._cursorBlinkStateManager.value?.restartBlinkAnimation();\n  }\n\n  public handleGridChanged(startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager.value || this._cursorBlinkStateManager.value.isPaused) {\n      this._render(false);\n    } else {\n      this._cursorBlinkStateManager.value.restartBlinkAnimation();\n    }\n  }\n\n  private _render(triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._themeService.colors.cursor.css;\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n      if (cursorInactiveStyle && cursorInactiveStyle !== 'none') {\n        this._cursorRenderers[cursorInactiveStyle](cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager.value && !this._cursorBlinkStateManager.value.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when browser is Firefox (#4487) or device pixel ratio is\n      // less than 1\n      if (isFirefox || this._coreBrowserService.dpr < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._themeService.colors.cursorAccent.css;\n    this._fillCharTrueColor(cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderOutlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._themeService.colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: (T | undefined)[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(undefined);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = undefined;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { is256Color } from 'browser/renderer/shared/CharAtlasUtils';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    linkifier2: ILinkifier2,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    decorationService: IDecorationService,\n    coreBrowserService: ICoreBrowserService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'link', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\n\n    this.register(linkifier2.onShowLinkUnderline(e => this._handleShowLinkUnderline(e)));\n    this.register(linkifier2.onHideLinkUnderline(e => this._handleHideLinkUnderline(e)));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _handleShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._themeService.colors.background.css;\n    } else if (e.fg && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._themeService.colors.ansi[e.fg].css;\n    } else {\n      this._ctx.fillStyle = this._themeService.colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _handleHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { Terminal } from '@xterm/xterm';\n\ninterface ISelectionState {\n  start?: [number, number];\n  end?: [number, number];\n  columnSelectMode?: boolean;\n  ydisp?: number;\n}\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state!: ISelectionState;\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    bufferService: IBufferService,\n    coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService,\n    optionsService: IOptionsService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'selection', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\n    this._clearState();\n  }\n\n  private _clearState(): void {\n    this._state = {\n      start: undefined,\n      end: undefined,\n      columnSelectMode: undefined,\n      ydisp: undefined\n    };\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // On resize use the base render layer's cached selection values since resize clears _state\n    // inside reset.\n    if (this._selectionModel.selectionStart && this._selectionModel.selectionEnd) {\n      this._clearState();\n      this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\n    }\n  }\n\n  public reset(): void {\n    if (this._state.start && this._state.end) {\n      this._clearState();\n      this._clearAll();\n    }\n  }\n\n  public handleBlur(): void {\n    this.reset();\n    this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\n  }\n\n  public handleFocus(): void {\n    this.reset();\n    this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    super.handleSelectionChanged(start, end, columnSelectMode);\n    this._redrawSelection(start, end, columnSelectMode);\n  }\n\n  private _redrawSelection(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Selection has not changed\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\n      return;\n    }\n\n    // Remove all selections\n    this._clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      this._clearState();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      this._state.ydisp = this._bufferService.buffer.ydisp;\n      return;\n    }\n\n    this._ctx.fillStyle = (this._coreBrowserService.isFocused\n      ? this._themeService.colors.selectionBackgroundTransparent\n      : this._themeService.colors.selectionInactiveBackgroundTransparent).css;\n\n    if (columnSelectMode) {\n      const startCol = start[0];\n      const width = end[0] - startCol;\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\n\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\n      }\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n    this._state.columnSelectMode = columnSelectMode;\n    this._state.ydisp = this._bufferService.buffer.ydisp;\n  }\n\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\n    return !this._areCoordinatesEqual(start, this._state.start) ||\n      !this._areCoordinatesEqual(end, this._state.end) ||\n      columnSelectMode !== this._state.columnSelectMode ||\n      ydisp !== this._state.ydisp;\n  }\n\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\n    if (!coord1 || !coord2) {\n      return false;\n    }\n\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { CharData, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Content, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { Terminal } from '@xterm/xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { GridCache } from './GridCache';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number = 0;\n  private _characterFont: string = '';\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n  private _workCell = new CellData();\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    alpha: boolean,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    decorationService: IDecorationService,\n    coreBrowserService: ICoreBrowserService,\n    themeService: IThemeService\n  ) {\n    super(terminal, container, 'text', zIndex, alpha, themeService, bufferService, optionsService, decorationService, coreBrowserService);\n    this._state = new GridCache<CharData>();\n    this.register(optionsService.onSpecificOptionChange('allowTransparency', value => this._setTransparency(value)));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(false, false);\n    if (this._characterWidth !== dim.device.char.width || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.device.char.width;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public reset(): void {\n    this._state.clear();\n    this._clearAll();\n  }\n\n  private _forEachCell(\n    firstRow: number,\n    lastRow: number,\n    callback: (\n      cell: ICellData,\n      x: number,\n      y: number\n    ) => void\n  ): void {\n    for (let y = firstRow; y <= lastRow; y++) {\n      const row = y + this._bufferService.buffer.ydisp;\n      const line = this._bufferService.buffer.lines.get(row);\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < this._bufferService.cols; x++) {\n        line!.loadCell(x, this._workCell);\n        let cell = this._workCell;\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (cell.getWidth() === 0) {\n          continue;\n        }\n\n        // exit early for NULL and SP\n        // NOTE: commented out due to #4120 (needs a more clever patch to keep things performant)\n        // const code = cell.getCode();\n        // if (code === 0 || code === 32) {\n        //  continue;\n        // }\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            this._workCell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        // If the character is an overlapping char and the character to the\n        // right is a space, take ownership of the cell to the right. We skip\n        // this check for joined characters because their rendering likely won't\n        // yield the same result as rendering the last character individually.\n        if (!isJoined && this._isOverlapping(cell)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\n            // patch width to 2\n            cell.content &= ~Content.WIDTH_MASK;\n            cell.content |= 2 << Content.WIDTH_SHIFT;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        callback(\n          cell,\n          x,\n          y\n        );\n\n        x = lastCharX;\n      }\n    }\n  }\n\n  /**\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\n   * same color together to reduce draw calls.\n   */\n  private _drawBackground(firstRow: number, lastRow: number): void {\n    const ctx = this._ctx;\n    const cols = this._bufferService.cols;\n    let startX: number = 0;\n    let startY: number = 0;\n    let prevFillStyle: string | null = null;\n\n    ctx.save();\n\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\n      // so we should too.\n      let nextFillStyle = null; // null represents default background color\n\n      if (cell.isInverse()) {\n        if (cell.isFgDefault()) {\n          nextFillStyle = this._themeService.colors.foreground.css;\n        } else if (cell.isFgRGB()) {\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n        } else {\n          nextFillStyle = this._themeService.colors.ansi[cell.getFgColor()].css;\n        }\n      } else if (cell.isBgRGB()) {\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else if (cell.isBgPalette()) {\n        nextFillStyle = this._themeService.colors.ansi[cell.getBgColor()].css;\n      }\n\n      // Get any decoration foreground/background overrides, this must be fetched before the early\n      // exist but applied after inverse\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, this._bufferService.buffer.ydisp + y, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          nextFillStyle = d.backgroundColorRGB.css;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      if (prevFillStyle === null) {\n        // This is either the first iteration, or the default background was set. Either way, we\n        // don't need to draw anything.\n        startX = x;\n        startY = y;\n      }\n\n      if (y !== startY) {\n        // our row changed, draw the previous row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, cols - startX, 1);\n        startX = x;\n        startY = y;\n      } else if (prevFillStyle !== nextFillStyle) {\n        // our color changed, draw the previous characters in this row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, x - startX, 1);\n        startX = x;\n        startY = y;\n      }\n\n      prevFillStyle = nextFillStyle;\n    });\n\n    // flush the last color we encountered\n    if (prevFillStyle !== null) {\n      ctx.fillStyle = prevFillStyle;\n      this._fillCells(startX, startY, cols - startX, 1);\n    }\n\n    ctx.restore();\n  }\n\n  private _drawForeground(firstRow: number, lastRow: number): void {\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => this._drawChars(cell, x, y));\n  }\n\n  public handleGridChanged(firstRow: number, lastRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    if (this._charAtlas) {\n      this._charAtlas.beginFrame();\n    }\n\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\n    this._drawBackground(firstRow, lastRow);\n    this._drawForeground(firstRow, lastRow);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(cell: ICellData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (cell.getWidth() !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    if (cell.getCode() < 256) {\n      return false;\n    }\n\n    const chars = cell.getChars();\n\n    // Deliver from cache if available\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\n      return this._characterOverlapCache[chars];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[chars] = overlaps;\n    return overlaps;\n  }\n}\n","import { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ReadonlyColorSet } from 'browser/Types';\nimport { Attributes, BgFlags, ExtFlags, FgFlags, NULL_CELL_CODE, UnderlineStyle } from 'common/buffer/Constants';\nimport { IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ICellData } from 'common/Types';\nimport { Terminal } from '@xterm/xterm';\nimport { rgba } from 'common/Color';\nimport { treatGlyphAsBackgroundColor } from 'browser/renderer/shared/RendererUtils';\n\n// Work variables to avoid garbage collection\nlet $fg = 0;\nlet $bg = 0;\nlet $hasFg = false;\nlet $hasBg = false;\nlet $isSelected = false;\nlet $colors: ReadonlyColorSet | undefined;\nlet $variantOffset = 0;\n\nexport class CellColorResolver {\n  /**\n   * The shared result of the {@link resolve} call. This is only safe to use immediately after as\n   * any other calls will share object.\n   */\n  public readonly result: { fg: number, bg: number, ext: number } = {\n    fg: 0,\n    bg: 0,\n    ext: 0\n  };\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _optionService: IOptionsService,\n    private readonly _selectionRenderModel: ISelectionRenderModel,\n    private readonly _decorationService: IDecorationService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _themeService: IThemeService\n  ) {\n  }\n\n  /**\n   * Resolves colors for the cell, putting the result into the shared {@link result}. This resolves\n   * overrides, inverse and selection for the cell which can then be used to feed into the renderer.\n   */\n  public resolve(cell: ICellData, x: number, y: number, deviceCellWidth: number): void {\n    this.result.bg = cell.bg;\n    this.result.fg = cell.fg;\n    this.result.ext = cell.bg & BgFlags.HAS_EXTENDED ? cell.extended.ext : 0;\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\n    // override logic throughout the different sub-renderers\n\n    // Reset overrides work variables\n    $bg = 0;\n    $fg = 0;\n    $hasBg = false;\n    $hasFg = false;\n    $isSelected = false;\n    $colors = this._themeService.colors;\n    $variantOffset = 0;\n\n    const code = cell.getCode();\n    if (code !== NULL_CELL_CODE && cell.extended.underlineStyle === UnderlineStyle.DOTTED) {\n      const lineWidth = Math.max(1, Math.floor(this._optionService.rawOptions.fontSize * this._coreBrowserService.dpr / 15));\n      $variantOffset = x * deviceCellWidth % (Math.round(lineWidth) * 2);\n    }\n\n    // Apply decorations on the bottom layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n    });\n\n    // Apply the selection color if needed\n    $isSelected = this._selectionRenderModel.isCellSelected(this._terminal, x, y);\n    if ($isSelected) {\n      // If the cell has a bg color, retain the color by blending it with the selection color\n      if (\n        (this.result.fg & FgFlags.INVERSE) ||\n        (this.result.bg & Attributes.CM_MASK) !== Attributes.CM_DEFAULT\n      ) {\n        // Resolve the standard bg color\n        if (this.result.fg & FgFlags.INVERSE) {\n          switch (this.result.fg & Attributes.CM_MASK) {\n            case Attributes.CM_P16:\n            case Attributes.CM_P256:\n              $bg = this._themeService.colors.ansi[this.result.fg & Attributes.PCOLOR_MASK].rgba;\n              break;\n            case Attributes.CM_RGB:\n              $bg = ((this.result.fg & Attributes.RGB_MASK) << 8) | 0xFF;\n              break;\n            case Attributes.CM_DEFAULT:\n            default:\n              $bg = this._themeService.colors.foreground.rgba;\n          }\n        } else {\n          switch (this.result.bg & Attributes.CM_MASK) {\n            case Attributes.CM_P16:\n            case Attributes.CM_P256:\n              $bg = this._themeService.colors.ansi[this.result.bg & Attributes.PCOLOR_MASK].rgba;\n              break;\n            case Attributes.CM_RGB:\n              $bg = ((this.result.bg & Attributes.RGB_MASK) << 8) | 0xFF;\n              break;\n            // No need to consider default bg color here as it's not possible\n          }\n        }\n        // Blend with selection bg color\n        $bg = rgba.blend(\n          $bg,\n          ((this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba & 0xFFFFFF00) | 0x80\n        ) >> 8 & Attributes.RGB_MASK;\n      } else {\n        $bg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & Attributes.RGB_MASK;\n      }\n      $hasBg = true;\n\n      // Apply explicit selection foreground if present\n      if ($colors.selectionForeground) {\n        $fg = $colors.selectionForeground.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n\n      // Overwrite fg as bg if it's a special decorative glyph (eg. powerline)\n      if (treatGlyphAsBackgroundColor(cell.getCode())) {\n        // Inverse default background should be treated as transparent\n        if (\n          (this.result.fg & FgFlags.INVERSE) &&\n          (this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT\n        ) {\n          $fg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & Attributes.RGB_MASK;\n        } else {\n\n          if (this.result.fg & FgFlags.INVERSE) {\n            switch (this.result.bg & Attributes.CM_MASK) {\n              case Attributes.CM_P16:\n              case Attributes.CM_P256:\n                $fg = this._themeService.colors.ansi[this.result.bg & Attributes.PCOLOR_MASK].rgba;\n                break;\n              case Attributes.CM_RGB:\n                $fg = ((this.result.bg & Attributes.RGB_MASK) << 8) | 0xFF;\n                break;\n              // No need to consider default bg color here as it's not possible\n            }\n          } else {\n            switch (this.result.fg & Attributes.CM_MASK) {\n              case Attributes.CM_P16:\n              case Attributes.CM_P256:\n                $fg = this._themeService.colors.ansi[this.result.fg & Attributes.PCOLOR_MASK].rgba;\n                break;\n              case Attributes.CM_RGB:\n                $fg = ((this.result.fg & Attributes.RGB_MASK) << 8) | 0xFF;\n                break;\n              case Attributes.CM_DEFAULT:\n              default:\n                $fg = this._themeService.colors.foreground.rgba;\n            }\n          }\n\n          $fg = rgba.blend(\n            $fg,\n            ((this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba & 0xFFFFFF00) | 0x80\n          ) >> 8 & Attributes.RGB_MASK;\n        }\n        $hasFg = true;\n      }\n    }\n\n    // Apply decorations on the top layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\n      if (d.backgroundColorRGB) {\n        $bg = d.backgroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        $fg = d.foregroundColorRGB.rgba >> 8 & Attributes.RGB_MASK;\n        $hasFg = true;\n      }\n    });\n\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\n    // ahead of time in order to use the correct cache key\n    if ($hasBg) {\n      if ($isSelected) {\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | $bg | Attributes.CM_RGB;\n      } else {\n        // Non-RGB attributes from model + override + force RGB color mode\n        $bg = (cell.bg & ~Attributes.RGB_MASK) | $bg | Attributes.CM_RGB;\n      }\n    }\n    if ($hasFg) {\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\n      $fg = (cell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | $fg | Attributes.CM_RGB;\n    }\n\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\n    // resolving the other inverse color and setting the inverse flag if needed.\n    if (this.result.fg & FgFlags.INVERSE) {\n      if ($hasBg && !$hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | (($colors.background.rgba >> 8 & Attributes.RGB_MASK) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this.result.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasFg = true;\n      }\n      if (!$hasBg && $hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this.result.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | (($colors.foreground.rgba >> 8 & Attributes.RGB_MASK) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this.result.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        $hasBg = true;\n      }\n    }\n\n    // Release object\n    $colors = undefined;\n\n    // Use the override if it exists\n    this.result.bg = $hasBg ? $bg : this.result.bg;\n    this.result.fg = $hasFg ? $fg : this.result.fg;\n\n    // Reset overrides variantOffset\n    this.result.ext &= ~ExtFlags.VARIANT_OFFSET;\n    this.result.ext |= ($variantOffset << 29) & ExtFlags.VARIANT_OFFSET;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\nimport { ITerminalOptions, Terminal } from '@xterm/xterm';\nimport { ITerminal, ReadonlyColorSet } from 'browser/Types';\nimport { ICharAtlasConfig, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { generateConfig, configEquals } from 'browser/renderer/shared/CharAtlasUtils';\n\ninterface ITextureAtlasCacheEntry {\n  atlas: ITextureAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ITextureAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireTextureAtlas(\n  terminal: Terminal,\n  options: Required<ITerminalOptions>,\n  colors: ReadonlyColorSet,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  deviceCharWidth: number,\n  deviceCharHeight: number,\n  devicePixelRatio: number\n): ITextureAtlas {\n  const newConfig = generateConfig(deviceCellWidth, deviceCellHeight, deviceCharWidth, deviceCharHeight, options, colors, devicePixelRatio);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const core: ITerminal = (terminal as any)._core;\n  const newEntry: ITextureAtlasCacheEntry = {\n    atlas: new TextureAtlas(document, newConfig, core.unicodeService),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { ITerminalOptions } from '@xterm/xterm';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { NULL_COLOR } from 'common/Color';\n\nexport function generateConfig(deviceCellWidth: number, deviceCellHeight: number, deviceCharWidth: number, deviceCharHeight: number, options: Required<ITerminalOptions>, colors: ReadonlyColorSet, devicePixelRatio: number): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionForeground: NULL_COLOR,\n    selectionBackgroundTransparent: NULL_COLOR,\n    selectionBackgroundOpaque: NULL_COLOR,\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache,\n    halfContrastCache: colors.halfContrastCache\n  };\n  return {\n    customGlyphs: options.customGlyphs,\n    devicePixelRatio,\n    letterSpacing: options.letterSpacing,\n    lineHeight: options.lineHeight,\n    deviceCellWidth: deviceCellWidth,\n    deviceCellHeight: deviceCellHeight,\n    deviceCharWidth: deviceCharWidth,\n    deviceCharHeight: deviceCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    drawBoldTextInBrightColors: options.drawBoldTextInBrightColors,\n    minimumContrastRatio: options.minimumContrastRatio,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.deviceCharWidth === b.deviceCharWidth &&\n      a.deviceCharHeight === b.deviceCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground.rgba === b.colors.foreground.rgba &&\n      a.colors.background.rgba === b.colors.background.rgba;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from 'browser/services/Services';\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    private _renderCallback: () => void,\n    private _coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (this._coreBrowserService.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 8, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not\n * visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line\n  '\\u{E0B5}': { d: 'M.2,1 C.422,1,.8,.826,.78,.5 C.8,.174,0.422,0,.2,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line\n  '\\u{E0B7}': { d: 'M.8,1 C0.578,1,0.2,.826,.22,.5 C0.2,0.174,0.578,0,0.8,0', type: VectorType.STROKE, leftPadding: 1 },\n  // Lower left triangle\n  '\\u{E0B8}': { d: 'M-.5,-.5 L1.5,1.5 L-.5,1.5', type: VectorType.FILL },\n  // Backslash separator\n  '\\u{E0B9}': { d: 'M-.5,-.5 L1.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Lower right triangle\n  '\\u{E0BA}': { d: 'M1.5,-.5 L-.5,1.5 L1.5,1.5', type: VectorType.FILL },\n  // Upper left triangle\n  '\\u{E0BC}': { d: 'M1.5,-.5 L-.5,1.5 L-.5,-.5', type: VectorType.FILL },\n  // Forward slash separator\n  '\\u{E0BD}': { d: 'M1.5,-.5 L-.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Upper right triangle\n  '\\u{E0BE}': { d: 'M-.5,-.5 L1.5,1.5 L1.5,-.5', type: VectorType.FILL }\n};\n// Forward slash separator redundant\npowerlineDefinitions['\\u{E0BB}'] = powerlineDefinitions['\\u{E0BD}'];\n// Backslash separator redundant\npowerlineDefinitions['\\u{E0BF}'] = powerlineDefinitions['\\u{E0B9}'];\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, devicePixelRatio);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, fontSize, devicePixelRatio);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = deviceCellWidth / 8;\n    const yEighth = deviceCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = ctx.canvas.ownerDocument.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  devicePixelRatio: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / deviceCellHeight * deviceCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, deviceCellWidth, deviceCellHeight, xOffset, yOffset, true, devicePixelRatio));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  deviceCellWidth: number,\n  deviceCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): void {\n  // Clip the cell to make sure drawing doesn't occur beyond bounds\n  const clipRegion = new Path2D();\n  clipRegion.rect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\n  ctx.clip(clipRegion);\n\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      deviceCellWidth,\n      deviceCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      devicePixelRatio,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  try {\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  } catch {\n    observer.disconnect();\n    observer = undefined;\n  }\n  return toDisposable(() => observer?.disconnect());\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function treatGlyphAsBackgroundColor(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n\nexport function computeNextVariantOffset(cellWidth: number, lineWidth: number, currentOffset: number = 0): number {\n  return (cellWidth - (Math.round(lineWidth) * 2 - currentOffset)) % (Math.round(lineWidth) * 2);\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from 'browser/Types';\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { Terminal } from '@xterm/xterm';\n\nclass SelectionRenderModel implements ISelectionRenderModel {\n  public hasSelection!: boolean;\n  public columnSelectMode!: boolean;\n  public viewportStartRow!: number;\n  public viewportEndRow!: number;\n  public viewportCappedStartRow!: number;\n  public viewportCappedEndRow!: number;\n  public startCol!: number;\n  public endCol!: number;\n  public selectionStart: [number, number] | undefined;\n  public selectionEnd: [number, number] | undefined;\n\n  constructor() {\n    this.clear();\n  }\n\n  public clear(): void {\n    this.hasSelection = false;\n    this.columnSelectMode = false;\n    this.viewportStartRow = 0;\n    this.viewportEndRow = 0;\n    this.viewportCappedStartRow = 0;\n    this.viewportCappedEndRow = 0;\n    this.startCol = 0;\n    this.endCol = 0;\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n  }\n\n  public update(terminal: ITerminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this.clear();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportY = terminal.buffers.active.ydisp;\n    const viewportStartRow = start[1] - viewportY;\n    const viewportEndRow = end[1] - viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this.clear();\n      return;\n    }\n\n    this.hasSelection = true;\n    this.columnSelectMode = columnSelectMode;\n    this.viewportStartRow = viewportStartRow;\n    this.viewportEndRow = viewportEndRow;\n    this.viewportCappedStartRow = viewportCappedStartRow;\n    this.viewportCappedEndRow = viewportCappedEndRow;\n    this.startCol = start[0];\n    this.endCol = end[0];\n  }\n\n  public isCellSelected(terminal: Terminal, x: number, y: number): boolean {\n    if (!this.hasSelection) {\n      return false;\n    }\n    y -= terminal.buffer.active.viewportY;\n    if (this.columnSelectMode) {\n      if (this.startCol <= this.endCol) {\n        return x >= this.startCol && y >= this.viewportCappedStartRow &&\n          x < this.endCol && y <= this.viewportCappedEndRow;\n      }\n      return x < this.startCol && y >= this.viewportCappedStartRow &&\n        x >= this.endCol && y <= this.viewportCappedEndRow;\n    }\n    return (y > this.viewportStartRow && y < this.viewportEndRow) ||\n      (this.viewportStartRow === this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportEndRow && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol);\n  }\n}\n\nexport function createSelectionRenderModel(): ISelectionRenderModel {\n  return new SelectionRenderModel();\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/shared/Constants';\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\nimport { computeNextVariantOffset, treatGlyphAsBackgroundColor, isPowerlineGlyph, isRestrictedPowerlineGlyph, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\nimport { IBoundingBox, ICharAtlasConfig, IRasterizedGlyph, ITextureAtlas } from 'browser/renderer/shared/Types';\nimport { NULL_COLOR, channels, color, rgba } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { FourKeyMap } from 'common/MultiKeyMap';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IColor } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { Attributes, DEFAULT_COLOR, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\nimport { IUnicodeService } from 'common/services/Services';\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  texturePage: 0,\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  offset: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nconst enum Constants {\n  /**\n   * The amount of pixel padding to allow in each row. Setting this to zero would make the atlas\n   * page pack as tightly as possible, but more pages would end up being created as a result.\n   */\n  ROW_PIXEL_THRESHOLD = 2,\n  /**\n   * The maximum texture size regardless of what the actual hardware maximum turns out to be. This\n   * is enforced to ensure uploading the texture still finishes in a reasonable amount of time. A\n   * 4096 squared image takes up 16MB of GPU memory.\n   */\n  FORCED_MAX_TEXTURE_SIZE = 4096\n}\n\ninterface ICharAtlasActiveRow {\n  x: number;\n  y: number;\n  height: number;\n}\n\n// Work variables to avoid garbage collection\nlet $glyph = undefined;\n\nexport class TextureAtlas implements ITextureAtlas {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n\n  // The texture that the atlas is drawn to\n  private _pages: AtlasPage[] = [];\n  public get pages(): { canvas: HTMLCanvasElement, version: number }[] { return this._pages; }\n\n  // The set of atlas pages that can be written to\n  private _activePages: AtlasPage[] = [];\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  private _textureSize: number = 512;\n\n  public static maxAtlasPages: number | undefined;\n  public static maxTextureSize: number | undefined;\n\n  private readonly _onAddTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n  private readonly _onRemoveTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\n\n  constructor(\n    private readonly _document: Document,\n    private readonly _config: ICharAtlasConfig,\n    private readonly _unicodeService: IUnicodeService\n  ) {\n    this._createNewPage();\n    this._tmpCanvas = createCanvas(\n      _document,\n      this._config.deviceCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2,\n      this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 2\n    );\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {\n      alpha: this._config.allowTransparency,\n      willReadFrequently: true\n    }));\n  }\n\n  public dispose(): void {\n    for (const page of this.pages) {\n      page.canvas.remove();\n    }\n    this._onAddTextureAtlasCanvas.dispose();\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126, this is not urgent and done in idle callbacks\n    const queue = new IdleTaskQueue();\n    for (let i = 33; i < 126; i++) {\n      queue.enqueue(() => {\n        if (!this._cacheMap.get(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT)) {\n          const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\n          this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\n        }\n      });\n    }\n  }\n\n  private _requestClearModel = false;\n  public beginFrame(): boolean {\n    return this._requestClearModel;\n  }\n\n  public clearTexture(): void {\n    if (this._pages[0].currentRow.x === 0 && this._pages[0].currentRow.y === 0) {\n      return;\n    }\n    for (const page of this._pages) {\n      page.clear();\n    }\n    this._cacheMap.clear();\n    this._cacheMapCombined.clear();\n    this._didWarmUp = false;\n  }\n\n  private _createNewPage(): AtlasPage {\n    // Try merge the set of the 4 most used pages of the largest size. This is is deferred to a\n    // microtask to ensure it does not interrupt textures that will be rendered in the current\n    // animation frame which would result in blank rendered areas. This is actually not that\n    // expensive relative to drawing the glyphs, so there is no need to wait for an idle callback.\n    if (TextureAtlas.maxAtlasPages && this._pages.length >= Math.max(4, TextureAtlas.maxAtlasPages)) {\n      // Find the set of the largest 4 images, below the maximum size, with the highest\n      // percentages used\n      const pagesBySize = this._pages.filter(e => {\n        return e.canvas.width * 2 <= (TextureAtlas.maxTextureSize || Constants.FORCED_MAX_TEXTURE_SIZE);\n      }).sort((a, b) => {\n        if (b.canvas.width !== a.canvas.width) {\n          return b.canvas.width - a.canvas.width;\n        }\n        return b.percentageUsed - a.percentageUsed;\n      });\n      let sameSizeI = -1;\n      let size = 0;\n      for (let i = 0; i < pagesBySize.length; i++) {\n        if (pagesBySize[i].canvas.width !== size) {\n          sameSizeI = i;\n          size = pagesBySize[i].canvas.width;\n        } else if (i - sameSizeI === 3) {\n          break;\n        }\n      }\n\n      // Gather details of the merge\n      const mergingPages = pagesBySize.slice(sameSizeI, sameSizeI + 4);\n      const sortedMergingPagesIndexes = mergingPages.map(e => e.glyphs[0].texturePage).sort((a, b) => a > b ? 1 : -1);\n      const mergedPageIndex = this.pages.length - mergingPages.length;\n\n      // Merge into the new page\n      const mergedPage = this._mergePages(mergingPages, mergedPageIndex);\n      mergedPage.version++;\n\n      // Delete the pages, shifting glyph texture pages as needed\n      for (let i = sortedMergingPagesIndexes.length - 1; i >= 0; i--) {\n        this._deletePage(sortedMergingPagesIndexes[i]);\n      }\n\n      // Add the new merged page to the end\n      this.pages.push(mergedPage);\n\n      // Request the model to be cleared to refresh all texture pages.\n      this._requestClearModel = true;\n      this._onAddTextureAtlasCanvas.fire(mergedPage.canvas);\n    }\n\n    // All new atlas pages are created small as they are highly dynamic\n    const newPage = new AtlasPage(this._document, this._textureSize);\n    this._pages.push(newPage);\n    this._activePages.push(newPage);\n    this._onAddTextureAtlasCanvas.fire(newPage.canvas);\n    return newPage;\n  }\n\n  private _mergePages(mergingPages: AtlasPage[], mergedPageIndex: number): AtlasPage {\n    const mergedSize = mergingPages[0].canvas.width * 2;\n    const mergedPage = new AtlasPage(this._document, mergedSize, mergingPages);\n    for (const [i, p] of mergingPages.entries()) {\n      const xOffset = i * p.canvas.width % mergedSize;\n      const yOffset = Math.floor(i / 2) * p.canvas.height;\n      mergedPage.ctx.drawImage(p.canvas, xOffset, yOffset);\n      for (const g of p.glyphs) {\n        g.texturePage = mergedPageIndex;\n        g.sizeClipSpace.x = g.size.x / mergedSize;\n        g.sizeClipSpace.y = g.size.y / mergedSize;\n        g.texturePosition.x += xOffset;\n        g.texturePosition.y += yOffset;\n        g.texturePositionClipSpace.x = g.texturePosition.x / mergedSize;\n        g.texturePositionClipSpace.y = g.texturePosition.y / mergedSize;\n      }\n\n      this._onRemoveTextureAtlasCanvas.fire(p.canvas);\n\n      // Remove the merging page from active pages if it was there\n      const index = this._activePages.indexOf(p);\n      if (index !== -1) {\n        this._activePages.splice(index, 1);\n      }\n    }\n    return mergedPage;\n  }\n\n  private _deletePage(pageIndex: number): void {\n    this._pages.splice(pageIndex, 1);\n    for (let j = pageIndex; j < this._pages.length; j++) {\n      const adjustingPage = this._pages[j];\n      for (const g of adjustingPage.glyphs) {\n        g.texturePage--;\n      }\n      adjustingPage.version++;\n    }\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext, restrictToCellHeight);\n  }\n\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number, restrictToCellHeight: boolean): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext, restrictToCellHeight);\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  private _getFromCacheMap(\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\n    key: string | number,\n    bg: number,\n    fg: number,\n    ext: number,\n    restrictToCellHeight: boolean = false\n  ): IRasterizedGlyph {\n    $glyph = cacheMap.get(key, bg, fg, ext);\n    if (!$glyph) {\n      $glyph = this._drawToCache(key, bg, fg, ext, restrictToCellHeight);\n      cacheMap.set(key, bg, fg, ext, $glyph);\n    }\n    return $glyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return NULL_COLOR;\n    }\n\n    let result: IColor;\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        result = this._getColorFromAnsiIndex(bgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        result = channels.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = color.opaque(this._config.colors.foreground);\n        } else {\n          result = this._config.colors.background;\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold, dim, excludeFromContrastRatioDemands);\n    if (minimumContrastColor) {\n      return minimumContrastColor;\n    }\n\n    let result: IColor;\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        result = this._getColorFromAnsiIndex(fgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        result = channels.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.background;\n        } else {\n          result = this._config.colors.foreground;\n        }\n    }\n\n    // Always use an opaque color regardless of allowTransparency\n    if (this._config.allowTransparency) {\n      result = color.opaque(result);\n    }\n\n    // Apply dim to the color, opacity is fine to use for the foreground color\n    if (dim) {\n      result = color.multiplyOpacity(result, DIM_OPACITY);\n    }\n\n    return result;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, dim: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const cache = this._getContrastCache(dim);\n    const adjustedColor = cache.getColor(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n    // non-dim cells\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio / (dim ? 2 : 1));\n\n    if (!result) {\n      cache.setColor(bg, fg, null);\n      return undefined;\n    }\n\n    const color = channels.toColor(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    cache.setColor(bg, fg, color);\n\n    return color;\n  }\n\n  private _getContrastCache(dim: boolean): IColorContrastCache {\n    if (dim) {\n      return this._config.colors.halfContrastCache;\n    }\n    return this._config.colors.contrastCache;\n  }\n\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number, restrictToCellHeight: boolean = false): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    // Uncomment for debugging\n    // console.log(`draw to cache \"${chars}\"`, bg, fg, ext);\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = Math.min(this._config.deviceCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2, this._textureSize);\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    // Include line height when drawing glyphs\n    const allowedHeight = Math.min(this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 4, this._textureSize);\n    if (this._tmpCanvas.height < allowedHeight) {\n      this._tmpCanvas.height = allowedHeight;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n    this._workAttributeData.extended.ext = ext;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    const overline = !!this._workAttributeData.isOverline();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha,\n    // regardless of transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, treatGlyphAsBackgroundColor(chars.charCodeAt(0)));\n    this._tmpCtx.fillStyle = foregroundColor.css;\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\n\n    // Draw custom characters if applicable\n    let customGlyph = false;\n    if (this._config.customGlyphs !== false) {\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight, this._config.fontSize, this._config.devicePixelRatio);\n    }\n\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\n    // background color. This should be disabled when the glyph contains multiple colors such as\n    // underline colors to prevent important colors could get cleared.\n    let enableClearThresholdCheck = !powerlineGlyph;\n\n    let chWidth: number;\n    if (typeof codeOrChars === 'number') {\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\n    } else {\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\n    }\n\n    // Draw underline\n    if (underline) {\n      this._tmpCtx.save();\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      // When the line width is odd, draw at a 0.5 position\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n\n      // Underline color\n      if (this._workAttributeData.isUnderlineColorDefault()) {\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\n        enableClearThresholdCheck = false;\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\n      } else {\n        enableClearThresholdCheck = false;\n        let fg = this._workAttributeData.getUnderlineColor();\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\n      }\n\n      // Underline style/stroke\n      this._tmpCtx.beginPath();\n      const xLeft = padding;\n      const yTop = Math.ceil(padding + this._config.deviceCharHeight) - yOffset - (restrictToCellHeight ? lineWidth * 2 : 0);\n      const yMid = yTop + lineWidth;\n      const yBot = yTop + lineWidth * 2;\n      let nextOffset = this._workAttributeData.getUnderlineVariantOffset();\n\n      for (let i = 0; i < chWidth; i++) {\n        this._tmpCtx.save();\n        const xChLeft = xLeft + i * this._config.deviceCellWidth;\n        const xChRight = xLeft + (i + 1) * this._config.deviceCellWidth;\n        const xChMid = xChLeft + this._config.deviceCellWidth / 2;\n        switch (this._workAttributeData.extended.underlineStyle) {\n          case UnderlineStyle.DOUBLE:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            this._tmpCtx.moveTo(xChLeft, yBot);\n            this._tmpCtx.lineTo(xChRight, yBot);\n            break;\n          case UnderlineStyle.CURLY:\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.deviceCharHeight - lineWidth / 2) - yOffset;\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.deviceCharHeight + lineWidth / 2) - yOffset;\n            // Clip the left and right edges of the underline such that it can be drawn just outside\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\n            // glyphs adjacent to one another.\n            const clipRegion = new Path2D();\n            clipRegion.rect(xChLeft, yTop, this._config.deviceCellWidth, yBot - yTop);\n            this._tmpCtx.clip(clipRegion);\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other\n            // cells\n            this._tmpCtx.moveTo(xChLeft - this._config.deviceCellWidth / 2, yMid);\n            this._tmpCtx.bezierCurveTo(\n              xChLeft - this._config.deviceCellWidth / 2, yCurlyTop,\n              xChLeft, yCurlyTop,\n              xChLeft, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChLeft, yCurlyBot,\n              xChMid, yCurlyBot,\n              xChMid, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChMid, yCurlyTop,\n              xChRight, yCurlyTop,\n              xChRight, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChRight, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yCurlyBot,\n              xChRight + this._config.deviceCellWidth / 2, yMid\n            );\n            break;\n          case UnderlineStyle.DOTTED:\n            const offsetWidth = nextOffset === 0 ? 0 :\n              (nextOffset >= lineWidth ? lineWidth * 2 - nextOffset : lineWidth - nextOffset);\n              // a line and a gap.\n            const isLineStart = nextOffset >= lineWidth ? false : true;\n            if (isLineStart === false || offsetWidth === 0) {\n              this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\n              this._tmpCtx.moveTo(xChLeft + offsetWidth, yTop);\n              this._tmpCtx.lineTo(xChRight, yTop);\n            } else {\n              this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\n              this._tmpCtx.moveTo(xChLeft, yTop);\n              this._tmpCtx.lineTo(xChLeft + offsetWidth, yTop);\n              this._tmpCtx.moveTo(xChLeft + offsetWidth + lineWidth, yTop);\n              this._tmpCtx.lineTo(xChRight, yTop);\n            }\n            nextOffset = computeNextVariantOffset(xChRight - xChLeft, lineWidth, nextOffset);\n            break;\n          case UnderlineStyle.DASHED:\n            const lineRatio = 0.6;\n            const gapRatio = 0.3;\n            // End line ratio is approximately equal to 0.1\n            const xChWidth = xChRight - xChLeft;\n            const line = Math.floor(lineRatio * xChWidth);\n            const gap = Math.floor(gapRatio * xChWidth);\n            const end = xChWidth - line - gap;\n            this._tmpCtx.setLineDash([line, gap, end]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.SINGLE:\n          default:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n        }\n        this._tmpCtx.stroke();\n        this._tmpCtx.restore();\n      }\n      this._tmpCtx.restore();\n\n      // Draw stroke in the background color for non custom characters in order to give an outline\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\n      // looks odd when the font size is too small\n      if (!customGlyph && this._config.fontSize >= 12) {\n        // This only works when transparency is disabled because it's not clear how to clear stroked\n        // text\n        if (!this._config.allowTransparency && chars !== ' ') {\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\n          // baseline\n          this._tmpCtx.save();\n          this._tmpCtx.textBaseline = 'alphabetic';\n          const metrics = this._tmpCtx.measureText(chars);\n          this._tmpCtx.restore();\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\n            // This translates to 1/2 the line width in either direction\n            this._tmpCtx.save();\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\n            // which would increase GPU memory demands\n            const clipRegion = new Path2D();\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.deviceCellWidth * chWidth, yBot - yTop + Math.ceil(lineWidth / 2));\n            this._tmpCtx.clip(clipRegion);\n            this._tmpCtx.lineWidth = this._config.devicePixelRatio * 3;\n            this._tmpCtx.strokeStyle = backgroundColor.css;\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.deviceCharHeight);\n            this._tmpCtx.restore();\n          }\n        }\n      }\n    }\n\n    // Overline\n    if (overline) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    // Draw the character\n    if (!customGlyph) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight);\n    }\n\n    // If this character is underscore and beyond the cell bounds, shift it up until it is visible\n    // even on the bottom row, try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.save();\n          this._tmpCtx.fillStyle = backgroundColor.css;\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.restore();\n          this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw strokethrough\n    if (strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // Clear out the background color and determine if the glyph is empty.\n    let isEmpty: boolean;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\n    } else {\n      isEmpty = checkCompletelyTransparent(imageData);\n    }\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\n\n    // Find the best atlas row to use\n    let activePage: AtlasPage;\n    let activeRow: ICharAtlasActiveRow;\n    while (true) {\n      // If there are no active pages (the last smallest 4 were merged), create a new one\n      if (this._activePages.length === 0) {\n        const newPage = this._createNewPage();\n        activePage = newPage;\n        activeRow = newPage.currentRow;\n        activeRow.height = rasterizedGlyph.size.y;\n        break;\n      }\n\n      // Get the best current row from all active pages\n      activePage = this._activePages[this._activePages.length - 1];\n      activeRow = activePage.currentRow;\n      for (const p of this._activePages) {\n        if (rasterizedGlyph.size.y <= p.currentRow.height) {\n          activePage = p;\n          activeRow = p.currentRow;\n        }\n      }\n\n      // TODO: This algorithm could be simplified:\n      // - Search for the page with ROW_PIXEL_THRESHOLD in mind\n      // - Keep track of current/fixed rows in a Map\n\n      // Replace the best current row with a fixed row if there is one at least as good as the\n      // current row. Search in reverse to prioritize filling in older pages.\n      for (let i = this._activePages.length - 1; i >= 0; i--) {\n        for (const row of this._activePages[i].fixedRows) {\n          if (row.height <= activeRow.height && rasterizedGlyph.size.y <= row.height) {\n            activePage = this._activePages[i];\n            activeRow = row;\n          }\n        }\n      }\n\n      // Create a new page if too much vertical space would be wasted or there is not enough room\n      // left in the page. The previous active row will become fixed in the process as it now has a\n      // fixed height\n      if (activeRow.y + rasterizedGlyph.size.y >= activePage.canvas.height || activeRow.height > rasterizedGlyph.size.y + Constants.ROW_PIXEL_THRESHOLD) {\n        // Create the new fixed height row, creating a new page if there isn't enough room on the\n        // current page\n        let wasPageAndRowFound = false;\n        if (activePage.currentRow.y + activePage.currentRow.height + rasterizedGlyph.size.y >= activePage.canvas.height) {\n          // Find the first page with room to create the new row on\n          let candidatePage: AtlasPage | undefined;\n          for (const p of this._activePages) {\n            if (p.currentRow.y + p.currentRow.height + rasterizedGlyph.size.y < p.canvas.height) {\n              candidatePage = p;\n              break;\n            }\n          }\n          if (candidatePage) {\n            activePage = candidatePage;\n          } else {\n            // Before creating a new atlas page that would trigger a page merge, check if the\n            // current active row is sufficient when ignoring the ROW_PIXEL_THRESHOLD. This will\n            // improve texture utilization by using the available space before the page is merged\n            // and becomes static.\n            if (\n              TextureAtlas.maxAtlasPages &&\n              this._pages.length >= TextureAtlas.maxAtlasPages &&\n              activeRow.y + rasterizedGlyph.size.y <= activePage.canvas.height &&\n              activeRow.height >= rasterizedGlyph.size.y &&\n              activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width\n            ) {\n              // activePage and activeRow is already valid\n              wasPageAndRowFound = true;\n            } else {\n              // Create a new page if there is no room\n              const newPage = this._createNewPage();\n              activePage = newPage;\n              activeRow = newPage.currentRow;\n              activeRow.height = rasterizedGlyph.size.y;\n              wasPageAndRowFound = true;\n            }\n          }\n        }\n        if (!wasPageAndRowFound) {\n          // Fix the current row as the new row is being added below\n          if (activePage.currentRow.height > 0) {\n            activePage.fixedRows.push(activePage.currentRow);\n          }\n          activeRow = {\n            x: 0,\n            y: activePage.currentRow.y + activePage.currentRow.height,\n            height: rasterizedGlyph.size.y\n          };\n          activePage.fixedRows.push(activeRow);\n\n          // Create the new current row below the new fixed height row\n          activePage.currentRow = {\n            x: 0,\n            y: activeRow.y + activeRow.height,\n            height: 0\n          };\n        }\n        // TODO: Remove pages from _activePages when all rows are filled\n      }\n\n      // Exit the loop if there is enough room in the row\n      if (activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width) {\n        break;\n      }\n\n      // If there is not enough room in the current row, finish it and try again\n      if (activeRow === activePage.currentRow) {\n        activeRow.x = 0;\n        activeRow.y += activeRow.height;\n        activeRow.height = 0;\n      } else {\n        activePage.fixedRows.splice(activePage.fixedRows.indexOf(activeRow), 1);\n      }\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePage = this._pages.indexOf(activePage);\n    rasterizedGlyph.texturePosition.x = activeRow.x;\n    rasterizedGlyph.texturePosition.y = activeRow.y;\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / activePage.canvas.width;\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / activePage.canvas.height;\n\n    // Fix the clipspace position as pages may be of differing size\n    rasterizedGlyph.sizeClipSpace.x /= activePage.canvas.width;\n    rasterizedGlyph.sizeClipSpace.y /= activePage.canvas.height;\n\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\n    // height\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\n    activeRow.x += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    activePage.ctx.putImageData(\n      imageData,\n      rasterizedGlyph.texturePosition.x - this._workBoundingBox.left,\n      rasterizedGlyph.texturePosition.y - this._workBoundingBox.top,\n      this._workBoundingBox.left,\n      this._workBoundingBox.top,\n      rasterizedGlyph.size.x,\n      rasterizedGlyph.size.y\n    );\n    activePage.addGlyph(rasterizedGlyph);\n    activePage.version++;\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.deviceCellHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.deviceCellWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < padding + width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = padding + width - 1; x >= padding; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePage: 0,\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1),\n        y: (boundingBox.bottom - boundingBox.top + 1)\n      },\n      offset: {\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.deviceCellWidth - this._config.deviceCharWidth) / 2) : 0),\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.deviceCellHeight - this._config.deviceCharHeight) / 2) : 0)\n      }\n    };\n  }\n}\n\nclass AtlasPage {\n  public readonly canvas: HTMLCanvasElement;\n  public readonly ctx: CanvasRenderingContext2D;\n\n  private _usedPixels: number = 0;\n  public get percentageUsed(): number { return this._usedPixels / (this.canvas.width * this.canvas.height); }\n\n  private readonly _glyphs: IRasterizedGlyph[] = [];\n  public get glyphs(): ReadonlyArray<IRasterizedGlyph> { return this._glyphs; }\n  public addGlyph(glyph: IRasterizedGlyph): void {\n    this._glyphs.push(glyph);\n    this._usedPixels += glyph.size.x * glyph.size.y;\n  }\n\n  /**\n   * Used to check whether the canvas of the atlas page has changed.\n   */\n  public version = 0;\n\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\n  // row's height, the following happens:\n  //\n  // - The current row becomes the fixed height row A\n  // - A new fixed height row B the exact size of the glyph is created below the current row\n  // - A new dynamic height current row is created below B\n  //\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\n  // underscores, hyphens etc. or those with underlines rendered.\n  public currentRow: ICharAtlasActiveRow = {\n    x: 0,\n    y: 0,\n    height: 0\n  };\n  public readonly fixedRows: ICharAtlasActiveRow[] = [];\n\n  constructor(\n    document: Document,\n    size: number,\n    sourcePages?: AtlasPage[]\n  ) {\n    if (sourcePages) {\n      for (const p of sourcePages) {\n        this._glyphs.push(...p.glyphs);\n        this._usedPixels += p._usedPixels;\n      }\n    }\n    this.canvas = createCanvas(document, size, size);\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this.ctx = throwIfFalsy(this.canvas.getContext('2d', { alpha: true }));\n  }\n\n  public clear(): void {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.currentRow.x = 0;\n    this.currentRow.y = 0;\n    this.currentRow.height = 0;\n    this.fixedRows.length = 0;\n    this.version++;\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\n  // Get color channels\n  const r = bg.rgba >>> 24;\n  const g = bg.rgba >>> 16 & 0xFF;\n  const b = bg.rgba >>> 8 & 0xFF;\n  const fgR = fg.rgba >>> 24;\n  const fgG = fg.rgba >>> 16 & 0xFF;\n  const fgB = fg.rgba >>> 8 & 0xFF;\n\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\n  // threshold is calculated relative to the difference between the background and foreground to\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\n  // were covered (fg=#8ae234, bg=#c4a000).\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\n\n  // Set alpha channel of relevent pixels to 0\n  let isEmpty = true;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    // Check exact match\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      // Check the threshold based difference\n      if (enableThresholdCheck &&\n          (Math.abs(imageData.data[offset] - r) +\n          Math.abs(imageData.data[offset + 1] - g) +\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\n        imageData.data[offset + 3] = 0;\n      } else {\n        isEmpty = false;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset + 3] > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction createCanvas(document: Document, width: number, height: number): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return channels.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  if (!isNode) {\n    // This is guaranteed to run in the first window, so document should be correct\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return channels.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return channels.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return channels.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function blend(bg: number, fg: number): number {\n    $a = (fg & 0xFF) / 0xFF;\n    if ($a === 1) {\n      return fg;\n    }\n    const fgR = (fg >> 24) & 0xFF;\n    const fgG = (fg >> 16) & 0xFF;\n    const fgB = (fg >> 8) & 0xFF;\n    const bgR = (bg >> 24) & 0xFF;\n    const bgG = (bg >> 16) & 0xFF;\n    const bgB = (bg >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    return channels.toRgba($r, $g, $b);\n  }\n\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n\nexport function runAndSubscribe<T>(event: IEvent<T>, handler: (e: T | undefined) => any): IDisposable {\n  handler(undefined);\n  return event(e => handler(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\ndeclare const process: unknown;\n\nexport const isNode = (typeof process !== 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n  public getUnderlineVariantOffset(): number {\n    return this.extended.underlineVariantOffset;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  public get underlineVariantOffset(): number {\n    const val = (this._ext & ExtFlags.VARIANT_OFFSET) >> 29;\n    if (val < 0) {\n      return val ^ 0xFFFFFFF8;\n    }\n    return val;\n  }\n  public set underlineVariantOffset(value: number) {\n    this._ext &= ~ExtFlags.VARIANT_OFFSET;\n    this._ext |= (value << 29) & ExtFlags.VARIANT_OFFSET;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..29\n   */\n  UNDERLINE_STYLE = 0x1C000000,\n\n  /**\n   * bit 30..32\n   *\n   * An optional variant for the glyph, this can be used for example to offset underlines by a\n   * number of pixels to create a perfect pattern.\n   */\n  VARIANT_OFFSET = 0xE0000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  trace: LogLevelEnum.TRACE,\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  private _logLevel: LogLevelEnum = LogLevelEnum.OFF;\n  public get logLevel(): LogLevelEnum { return this._logLevel; }\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n\n    // For trace logging, assume the latest created log service is valid\n    traceLogger = this;\n  }\n\n  private _updateLogLevel(): void {\n    this._logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, (this._optionsService.options.logger ? '' : LOG_PREFIX) + message, ...optionalParams);\n  }\n\n  public trace(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.TRACE) {\n      this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.DEBUG) {\n      this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.INFO) {\n      this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.WARN) {\n      this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.ERROR) {\n      this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, message, optionalParams);\n    }\n  }\n}\n\nlet traceLogger: ILogService;\nexport function setTraceLogger(logger: ILogService): void {\n  traceLogger = logger;\n}\n\n/**\n * A decorator that can be used to automatically log trace calls to the decorated function.\n */\nexport function traceCall(_target: any, key: string, descriptor: any): any {\n  if (typeof descriptor.value !== 'function') {\n    throw new Error('not supported');\n  }\n  const fnKey = 'value';\n  const fn = descriptor.value;\n  descriptor[fnKey] = function (...args: any[]) {\n    // Early exit\n    if (traceLogger.logLevel !== LogLevelEnum.TRACE) {\n      return fn.apply(this, args);\n    }\n\n    traceLogger.trace(`GlyphRenderer#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n    const result = fn.apply(this, args);\n    traceLogger.trace(`GlyphRenderer#${fn.name} return`, result);\n    return result;\n  };\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, CursorInactiveStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from '@xterm/xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\n    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  OFF = 5\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  readonly logLevel: LogLevelEnum;\n\n  trace(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  cursorInactiveStyle?: CursorInactiveStyle;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  documentOverride?: any | null;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  ignoreBracketedPasteMode?: boolean;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  logger?: ILogger | null;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowsPty?: IWindowsPty;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\n/*\n * Width and Grapheme_Cluster_Break properties of a character as a bit mask.\n *\n * bit 0: shouldJoin - should combine with preceding character.\n * bit 1..2: wcwidth - see UnicodeCharWidth.\n * bit 3..31: class of character (currently only 4 bits are used).\n *   This is used to determined grapheme clustering - i.e. which codepoints\n *   are to be combined into a single compound character.\n *\n * Use the UnicodeService static function createPropertyValue to create a\n * UnicodeCharProperties; use extractShouldJoin, extractWidth, and\n * extractCharKind to extract the components.\n */\nexport type UnicodeCharProperties = number;\n\n/**\n * Width in columns of a character.\n * In a CJK context, \"half-width\" characters (such as Latin) are width 1,\n * while \"full-width\" characters (such as Kanji) are 2 columns wide.\n * Combining characters (such as accents) are width 0.\n */\nexport type UnicodeCharWidth = 0 | 1 | 2;\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): UnicodeCharWidth;\n  getStringCellWidth(s: string): number;\n  /**\n   * Return character width and type for grapheme clustering.\n   * If preceding != 0, it is the return code from the previous character;\n   * in that case the result specifies if the characters should be joined.\n   */\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): UnicodeCharWidth;\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport type { ITerminalAddon, Terminal } from '@xterm/xterm';\nimport type { CanvasAddon as ICanvasApi } from '@xterm/addon-canvas';\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { ITerminal } from 'browser/Types';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { setTraceLogger } from 'common/services/LogService';\nimport { IBufferService, IDecorationService, ILogService } from 'common/services/Services';\nimport { CanvasRenderer } from './CanvasRenderer';\n\nexport class CanvasAddon extends Disposable implements ITerminalAddon , ICanvasApi {\n  private _terminal?: Terminal;\n  private _renderer?: CanvasRenderer;\n\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public activate(terminal: Terminal): void {\n    const core = (terminal as any)._core as ITerminal;\n    if (!terminal.element) {\n      this.register(core.onWillOpen(() => this.activate(terminal)));\n      return;\n    }\n\n    this._terminal = terminal;\n    const coreService = core.coreService;\n    const optionsService = core.optionsService;\n    const screenElement = core.screenElement!;\n    const linkifier = core.linkifier!;\n\n    const unsafeCore = core as any;\n    const bufferService: IBufferService = unsafeCore._bufferService;\n    const renderService: IRenderService = unsafeCore._renderService;\n    const characterJoinerService: ICharacterJoinerService = unsafeCore._characterJoinerService;\n    const charSizeService: ICharSizeService = unsafeCore._charSizeService;\n    const coreBrowserService: ICoreBrowserService = unsafeCore._coreBrowserService;\n    const decorationService: IDecorationService = unsafeCore._decorationService;\n    const logService: ILogService = unsafeCore._logService;\n    const themeService: IThemeService = unsafeCore._themeService;\n\n    // Set trace logger just in case it hasn't been yet which could happen when the addon is\n    // bundled separately to the core module\n    setTraceLogger(logService);\n\n    this._renderer = new CanvasRenderer(terminal, screenElement, linkifier, bufferService, charSizeService, optionsService, characterJoinerService, coreService, coreBrowserService, decorationService, themeService);\n    this.register(forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas));\n    this.register(forwardEvent(this._renderer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas));\n    renderService.setRenderer(this._renderer);\n    renderService.handleResize(bufferService.cols, bufferService.rows);\n\n    this.register(toDisposable(() => {\n      renderService.setRenderer((this._terminal as any)._core._createRenderer());\n      renderService.handleResize(terminal.cols, terminal.rows);\n      this._renderer?.dispose();\n      this._renderer = undefined;\n    }));\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas();\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","BaseRenderLayer","Disposable","canvas","this","_canvas","cacheCanvas","_charAtlas","pages","constructor","_terminal","_container","id","zIndex","_alpha","_themeService","_bufferService","_optionsService","_decorationService","_coreBrowserService","super","_deviceCharWidth","_deviceCharHeight","_deviceCellWidth","_deviceCellHeight","_deviceCharLeft","_deviceCharTop","_selectionModel","createSelectionRenderModel","_bitmapGenerator","_charAtlasDisposable","register","MutableDisposable","_onAddTextureAtlasCanvas","EventEmitter","onAddTextureAtlasCanvas","event","_cellColorResolver","CellColorResolver","mainDocument","createElement","classList","add","style","toString","_initCanvas","appendChild","_refreshCharAtlas","colors","onChangeColors","e","reset","handleSelectionChanged","selectionStart","selectionEnd","columnSelectMode","toDisposable","remove","_ctx","throwIfFalsy","getContext","alpha","_clearAll","handleBlur","handleFocus","handleCursorMove","handleGridChanged","startRow","endRow","start","end","update","_core","_setTransparency","oldCanvas","cloneNode","replaceChild","rows","colorSet","acquireTextureAtlas","rawOptions","dpr","value","forwardEvent","warmUp","i","length","BitmapGenerator","resize","dim","device","cell","width","height","char","left","top","css","clearTextureAtlas","clearTexture","_fillCells","x","y","fillRect","_fillMiddleLineAtCells","cellOffset","Math","ceil","_fillBottomLineAtCells","pixelOffset","_curlyUnderlineAtCell","save","beginPath","strokeStyle","fillStyle","lineWidth","xOffset","xLeft","xMid","xRight","yMid","yMidBot","yMidTop","moveTo","bezierCurveTo","stroke","restore","_dottedUnderlineAtCell","setLineDash","lineTo","closePath","_dashedUnderlineAtCell","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","clearRect","background","_clearCells","_fillCharTrueColor","font","_getFont","textBaseline","TEXT_BASELINE","_clipRow","drawSuccess","customGlyphs","tryDrawCustomChar","getChars","fontSize","fillText","_drawChars","chars","resolve","buffer","ydisp","glyph","getRasterizedGlyphCombinedChar","result","bg","fg","ext","getRasterizedGlyph","getCode","WHITESPACE_CELL_CODE","size","texturePage","bitmap","close","version","refresh","drawImage","texturePosition","offset","rect","cols","clip","isBold","isItalic","fontWeightBold","fontWeight","fontFamily","_bitmap","_state","_commitTimeout","undefined","isSafari","window","setTimeout","_generate","createImageBitmap","then","CanvasRenderer","_screenElement","linkifier2","_charSizeService","characterJoinerService","coreService","decorationService","_observerDisposable","_onRequestRedraw","onRequestRedraw","_onChangeTextureAtlas","onChangeTextureAtlas","allowTransparency","_renderLayers","TextRenderLayer","SelectionRenderLayer","LinkRenderLayer","CursorRenderLayer","layer","dimensions","createRenderDimensions","_devicePixelRatio","_updateDimensions","observeDevicePixelDimensions","w","h","_setCanvasDevicePixelDimensions","onWindowChange","l","dispose","removeTerminalFromCache","textureAtlas","handleDevicePixelRatioChange","handleResize","handleCharSizeChanged","_runOperation","selectionForeground","fire","clear","operation","renderRows","hasValidSize","floor","lineHeight","round","letterSpacing","_requestRedrawViewport","terminal","container","bufferService","optionsService","_coreService","coreBrowserService","themeService","_cursorBlinkStateManager","_cell","CellData","isFocused","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","_renderOutlineCursor","onOptionChange","_handleOptionsChanged","_clearCursor","restartBlinkAnimation","pause","resume","cursorBlink","CursorBlinkStateManager","_render","isPaused","triggeredByAnimationFrame","isCursorInitialized","isCursorHidden","cursorY","ybase","viewportRelativeCursorY","cursorX","min","lines","get","loadCell","content","cursor","cursorStyle","cursorInactiveStyle","getWidth","isCursorVisible","isFirefox","cursorWidth","cursorAccent","cache","push","onShowLinkUnderline","_handleShowLinkUnderline","onHideLinkUnderline","_handleHideLinkUnderline","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","ansi","foreground","_clearState","_redrawSelection","_didStateChange","viewportStartRow","viewportEndRow","viewportCappedStartRow","max","viewportCappedEndRow","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","startCol","startRowEndCol","middleRowsCount","endCol","_areCoordinatesEqual","coord1","coord2","_characterJoinerService","_characterWidth","_characterFont","_characterOverlapCache","_workCell","GridCache","onSpecificOptionChange","terminalFont","_forEachCell","firstRow","lastRow","callback","row","line","joinedRanges","getJoinedCharacters","isJoined","lastCharX","range","shift","JoinedCellData","translateToString","_isOverlapping","getCodePoint","NULL_CELL_CODE","_drawBackground","ctx","startX","startY","prevFillStyle","nextFillStyle","isInverse","isFgDefault","isFgRGB","AttributeData","toColorRGB","getFgColor","join","isBgRGB","getBgColor","isBgPalette","isTop","forEachDecorationAtCell","d","options","backgroundColorRGB","_drawForeground","beginFrame","hasOwnProperty","overlaps","measureText","$colors","$fg","$bg","$hasFg","$hasBg","$isSelected","$variantOffset","_optionService","_selectionRenderModel","deviceCellWidth","extended","underlineStyle","rgba","foregroundColorRGB","isCellSelected","blend","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","treatGlyphAsBackgroundColor","charAtlasCache","deviceCellHeight","deviceCharWidth","deviceCharHeight","devicePixelRatio","newConfig","generateConfig","entry","ownedByIndex","ownedBy","indexOf","configEquals","config","atlas","splice","core","newEntry","TextureAtlas","document","unicodeService","index","clonedColors","NULL_COLOR","slice","contrastCache","halfContrastCache","drawBoldTextInBrightColors","minimumContrastRatio","a","b","colorCode","DIM_OPACITY","isLegacyEdge","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","BLINK_INTERVAL","time","setInterval","blockElementDefinitions","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","powerlineDefinitions","type","rightPadding","leftPadding","c","yOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","drawBlockElementChar","patternDefinition","patternSet","cachedPatterns","Map","set","Error","pattern","tmpCanvas","ownerDocument","tmpCtx","imageData","ImageData","r","g","startsWith","parseInt","substring","split","map","parseFloat","data","putImageData","createPattern","drawPatternChar","boxDrawingDefinition","instructions","Object","entries","actualInstructions","Number","instruction","f","svgToCanvasInstructionMap","console","error","args","translateArgs","drawBoxDrawingChar","powerlineDefinition","clipRegion","Path2D","cssLineWidth","fill","drawPowerlineChar","clamp","cellWidth","cellHeight","doClamp","element","parentWindow","observer","ResizeObserver","find","target","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","isPowerlineGlyph","codepoint","isBoxOrBlockGlyph","currentOffset","SelectionRenderModel","hasSelection","viewportY","buffers","active","NULL_RASTERIZED_GLYPH","texturePositionClipSpace","sizeClipSpace","$glyph","_pages","_document","_config","_unicodeService","_didWarmUp","_cacheMap","FourKeyMap","_cacheMapCombined","_activePages","_workBoundingBox","bottom","right","_workAttributeData","_textureSize","_onRemoveTextureAtlasCanvas","onRemoveTextureAtlasCanvas","_requestClearModel","_createNewPage","_tmpCanvas","createCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","willReadFrequently","page","_doWarmUp","queue","IdleTaskQueue","enqueue","DEFAULT_COLOR","DEFAULT_EXT","rasterizedGlyph","_drawToCache","currentRow","maxAtlasPages","pagesBySize","filter","maxTextureSize","sort","percentageUsed","sameSizeI","mergingPages","sortedMergingPagesIndexes","glyphs","mergedPageIndex","mergedPage","_mergePages","_deletePage","newPage","AtlasPage","mergedSize","p","pageIndex","j","adjustingPage","restrictToCellHeight","_getFromCacheMap","code","cacheMap","key","_getColorFromAnsiIndex","idx","_getBackgroundColor","bgColorMode","bgColor","inverse","arr","channels","toColor","color","opaque","_getForegroundColor","fgColorMode","fgColor","bold","excludeFromContrastRatioDemands","minimumContrastColor","_getMinimumContrastColor","multiplyOpacity","_resolveBackgroundRgba","_resolveForegroundRgba","_getContrastCache","adjustedColor","getColor","bgRgba","fgRgba","ensureContrastRatio","setColor","codeOrChars","String","fromCharCode","allowedWidth","allowedHeight","isInvisible","isDim","italic","underline","isUnderline","strikethrough","isStrikethrough","overline","isOverline","getFgColorMode","getBgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","powerlineGlyph","charCodeAt","restrictedPowerlineGlyph","isRestrictedPowerlineGlyph","foregroundColor","padding","customGlyph","chWidth","enableClearThresholdCheck","wcwidth","getStringCellWidth","isUnderlineColorDefault","isUnderlineColorRGB","getUnderlineColor","yTop","yBot","nextOffset","getUnderlineVariantOffset","xChLeft","xChRight","xChMid","yCurlyBot","yCurlyTop","offsetWidth","computeNextVariantOffset","lineRatio","gapRatio","xChWidth","gap","metrics","actualBoundingBoxDescent","strokeText","isBeyondCellBounds","clearColor","getImageData","isEmpty","checkCompletelyTransparent","_findGlyphBoundingBox","activePage","activeRow","fixedRows","wasPageAndRowFound","candidatePage","addGlyph","boundingBox","restrictedGlyph","found","alphaOffset","_usedPixels","_glyphs","sourcePages","enableThresholdCheck","fgR","fgG","fgB","threshold","abs","firstCell","combinedData","_width","isCombined","setFromCharData","getAsCharData","CharacterJoinerService","_characterJoiners","_nextCharacterJoinerId","handler","joiner","deregister","joinerId","ranges","lineStr","rangeStartColumn","currentStringIndex","rangeStartStringIndex","rangeAttrFG","getFg","rangeAttrBG","getBg","getTrimmedLength","_getJoinedRanges","WHITESPACE_CELL_CHAR","startIndex","endIndex","lineData","text","allJoinedRanges","joinerRanges","_mergeRanges","_stringRangesToCellRanges","currentRangeIndex","currentRangeStarted","currentRange","getString","newRange","inRange","IBufferService","$r","$g","$b","$a","rgb","toPaddedHex","s","contrastRatio","l1","l2","toCss","toRgba","opacity","toChannels","bgR","bgG","bgB","isOpaque","ratio","rgbaColor","factor","$ctx","$litmusColor","isNode","createLinearGradient","match","repeat","rgbaMatch","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","resultA","resultARatio","resultB","_listeners","_disposed","_event","listener","arg1","arg2","call","clearListeners","from","to","disposeArray","disposables","_disposables","_isDisposed","unregister","_value","array","TwoKeyMap","_data","first","second","third","fourth","process","userAgent","navigator","platform","includes","test","majorVersion","isMac","isIpad","isIphone","isWindows","isLinux","isChromeOS","TaskQueue","_tasks","_i","task","_start","flush","_idleCallback","_cancelCallback","_requestCallback","_process","deadline","taskDuration","longestTask","lastDeadlineRemaining","timeRemaining","deadlineRemaining","warn","PriorityTaskQueue","_createDeadline","identifier","duration","requestIdleCallback","cancelIdleCallback","_queue","ExtendedAttrs","fromColorRGB","clone","newObj","hasExtendedAttrs","isBlink","isProtected","isFgPalette","isBgDefault","isAttributeDefault","updateExtended","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","underlineVariantOffset","_urlId","_ext","urlId","val","fromCharData","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","WHITESPACE_CELL_WIDTH","codePoint","_interim","decode","input","startPos","interim","Uint8Array","byte1","byte2","byte3","byte4","discardInterim","cp","tmp","pos","missing","fourStop","optionsKeyToLogLevel","trace","LogLevelEnum","TRACE","debug","DEBUG","info","INFO","WARN","ERROR","off","OFF","traceLogger","LogService","logLevel","_logLevel","_updateLogLevel","_evalLazyOptionalParams","optionalParams","_log","message","logger","log","IOptionsService","_target","descriptor","fn","apply","name","JSON","stringify","DI_TARGET","DI_DEPENDENCIES","serviceRegistry","ctor","has","decorator","arguments","storeServiceDependency","createDecorator","ICoreMouseService","ICoreService","ICharsetService","IInstantiationService","ILogService","IOscLinkService","IUnicodeService","IDecorationService","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","CanvasAddon","_renderer","activate","onWillOpen","screenElement","linkifier","unsafeCore","renderService","_renderService","charSizeService","logService","_logService","setTraceLogger","setRenderer","_createRenderer"],"sourceRoot":""}