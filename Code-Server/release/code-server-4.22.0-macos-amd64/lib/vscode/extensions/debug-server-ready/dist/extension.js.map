{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://debug-server-ready/external commonjs \"vscode\"","webpack://debug-server-ready/external node-commonjs \"crypto\"","webpack://debug-server-ready/external node-commonjs \"util\"","webpack://debug-server-ready/webpack/bootstrap","webpack://debug-server-ready/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"crypto\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as util from 'util';\nimport { randomUUID } from 'crypto';\n\nconst PATTERN = 'listening on.* (https?://\\\\S+|[0-9]+)'; // matches \"listening on port 3000\" or \"Now listening on: https://localhost:5001\"\nconst URI_PORT_FORMAT = 'http://localhost:%s';\nconst URI_FORMAT = '%s';\nconst WEB_ROOT = '${workspaceFolder}';\n\ninterface ServerReadyAction {\n\tpattern: string;\n\taction?: 'openExternally' | 'debugWithChrome' | 'debugWithEdge' | 'startDebugging';\n\turiFormat?: string;\n\twebRoot?: string;\n\tname?: string;\n\tconfig?: vscode.DebugConfiguration;\n\tkillOnServerStop?: boolean;\n}\n\n// Escape codes, compiled from https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_\nconst CSI_SEQUENCE = /(:?\\x1b\\[|\\x9B)[=?>!]?[\\d;:]*[\"$#'* ]?[a-zA-Z@^`{}|~]/g;\n\n/**\n * Froms vs/base/common/strings.ts in core\n * @see https://github.com/microsoft/vscode/blob/22a2a0e833175c32a2005b977d7fbd355582e416/src/vs/base/common/strings.ts#L736\n */\nfunction removeAnsiEscapeCodes(str: string): string {\n\tif (str) {\n\t\tstr = str.replace(CSI_SEQUENCE, '');\n\t}\n\n\treturn str;\n}\n\nclass Trigger {\n\tprivate _fired = false;\n\n\tpublic get hasFired() {\n\t\treturn this._fired;\n\t}\n\n\tpublic fire() {\n\t\tthis._fired = true;\n\t}\n}\n\nclass ServerReadyDetector extends vscode.Disposable {\n\n\tprivate static detectors = new Map<vscode.DebugSession, ServerReadyDetector>();\n\tprivate static terminalDataListener: vscode.Disposable | undefined;\n\n\tprivate readonly stoppedEmitter = new vscode.EventEmitter<void>();\n\tprivate readonly onDidSessionStop = this.stoppedEmitter.event;\n\tprivate readonly disposables = new Set<vscode.Disposable>([]);\n\tprivate trigger: Trigger;\n\tprivate shellPid?: number;\n\tprivate regexp: RegExp;\n\n\tstatic start(session: vscode.DebugSession): ServerReadyDetector | undefined {\n\t\tif (session.configuration.serverReadyAction) {\n\t\t\tlet detector = ServerReadyDetector.detectors.get(session);\n\t\t\tif (!detector) {\n\t\t\t\tdetector = new ServerReadyDetector(session);\n\t\t\t\tServerReadyDetector.detectors.set(session, detector);\n\t\t\t}\n\t\t\treturn detector;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstatic stop(session: vscode.DebugSession): void {\n\t\tconst detector = ServerReadyDetector.detectors.get(session);\n\t\tif (detector) {\n\t\t\tServerReadyDetector.detectors.delete(session);\n\t\t\tdetector.sessionStopped();\n\t\t\tdetector.dispose();\n\t\t}\n\t}\n\n\tstatic rememberShellPid(session: vscode.DebugSession, pid: number) {\n\t\tconst detector = ServerReadyDetector.detectors.get(session);\n\t\tif (detector) {\n\t\t\tdetector.shellPid = pid;\n\t\t}\n\t}\n\n\tstatic async startListeningTerminalData() {\n\t\tif (!this.terminalDataListener) {\n\t\t\tthis.terminalDataListener = vscode.window.onDidWriteTerminalData(async e => {\n\n\t\t\t\t// first find the detector with a matching pid\n\t\t\t\tconst pid = await e.terminal.processId;\n\t\t\t\tconst str = removeAnsiEscapeCodes(e.data);\n\t\t\t\tfor (const [, detector] of this.detectors) {\n\t\t\t\t\tif (detector.shellPid === pid) {\n\t\t\t\t\t\tdetector.detectPattern(str);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if none found, try all detectors until one matches\n\t\t\t\tfor (const [, detector] of this.detectors) {\n\t\t\t\t\tif (detector.detectPattern(str)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate constructor(private session: vscode.DebugSession) {\n\t\tsuper(() => this.internalDispose());\n\n\t\t// Re-used the triggered of the parent session, if one exists\n\t\tif (session.parentSession) {\n\t\t\tthis.trigger = ServerReadyDetector.start(session.parentSession)?.trigger ?? new Trigger();\n\t\t} else {\n\t\t\tthis.trigger = new Trigger();\n\t\t}\n\n\t\tthis.regexp = new RegExp(session.configuration.serverReadyAction.pattern || PATTERN, 'i');\n\t}\n\n\tprivate internalDispose() {\n\t\tthis.disposables.forEach(d => d.dispose());\n\t\tthis.disposables.clear();\n\t}\n\n\tpublic sessionStopped() {\n\t\tthis.stoppedEmitter.fire();\n\t}\n\n\tdetectPattern(s: string): boolean {\n\t\tif (!this.trigger.hasFired) {\n\t\t\tconst matches = this.regexp.exec(s);\n\t\t\tif (matches && matches.length >= 1) {\n\t\t\t\tthis.openExternalWithString(this.session, matches.length > 1 ? matches[1] : '');\n\t\t\t\tthis.trigger.fire();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate openExternalWithString(session: vscode.DebugSession, captureString: string) {\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\n\t\tlet uri;\n\t\tif (captureString === '') {\n\t\t\t// nothing captured by reg exp -> use the uriFormat as the target uri without substitution\n\t\t\t// verify that format does not contain '%s'\n\t\t\tconst format = args.uriFormat || '';\n\t\t\tif (format.indexOf('%s') >= 0) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') uses a substitution placeholder but pattern did not capture anything.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = format;\n\t\t} else {\n\t\t\t// if no uriFormat is specified guess the appropriate format based on the captureString\n\t\t\tconst format = args.uriFormat || (/^[0-9]+$/.test(captureString) ? URI_PORT_FORMAT : URI_FORMAT);\n\t\t\t// verify that format only contains a single '%s'\n\t\t\tconst s = format.split('%s');\n\t\t\tif (s.length !== 2) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') must contain exactly one substitution placeholder.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = util.format(format, captureString);\n\t\t}\n\n\t\tthis.openExternalWithUri(session, uri);\n\t}\n\n\tprivate async openExternalWithUri(session: vscode.DebugSession, uri: string) {\n\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\t\tswitch (args.action || 'openExternally') {\n\n\t\t\tcase 'openExternally':\n\t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(uri));\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithChrome':\n\t\t\t\tawait this.debugWithBrowser('pwa-chrome', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithEdge':\n\t\t\t\tawait this.debugWithBrowser('pwa-msedge', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'startDebugging':\n\t\t\t\tif (args.config) {\n\t\t\t\t\tawait this.startDebugSession(session, args.config.name, args.config);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.startDebugSession(session, args.name || 'unspecified');\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// not supported\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async debugWithBrowser(type: string, session: vscode.DebugSession, uri: string) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait this.startBrowserDebugSession(type, session, uri);\n\t\t\treturn;\n\t\t}\n\n\t\tconst trackerId = randomUUID();\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.catchStartedDebugSession(session => session.configuration._debugServerReadySessionId === trackerId, cts.token);\n\n\t\tif (!await this.startBrowserDebugSession(type, session, uri, trackerId)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = this.onDidSessionStop(async () => {\n\t\t\tstopListener.dispose();\n\t\t\tthis.disposables.delete(stopListener);\n\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t});\n\t\tthis.disposables.add(stopListener);\n\t}\n\n\tprivate startBrowserDebugSession(type: string, session: vscode.DebugSession, uri: string, trackerId?: string) {\n\t\treturn vscode.debug.startDebugging(session.workspaceFolder, {\n\t\t\ttype,\n\t\t\tname: 'Browser Debug',\n\t\t\trequest: 'launch',\n\t\t\turl: uri,\n\t\t\twebRoot: session.configuration.serverReadyAction.webRoot || WEB_ROOT,\n\t\t\t_debugServerReadySessionId: trackerId,\n\t\t});\n\t}\n\n\t/**\n\t * Starts a debug session given a debug configuration name (saved in launch.json) or a debug configuration object.\n\t *\n\t * @param session The parent debugSession\n\t * @param name The name of the configuration to launch. If config it set, it assumes it is the same as config.name.\n\t * @param config [Optional] Instead of starting a debug session by debug configuration name, use a debug configuration object instead.\n\t */\n\tprivate async startDebugSession(session: vscode.DebugSession, name: string, config?: vscode.DebugConfiguration) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait vscode.debug.startDebugging(session.workspaceFolder, config ?? name);\n\t\t\treturn;\n\t\t}\n\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.catchStartedDebugSession(x => x.name === name, cts.token);\n\n\t\tif (!await vscode.debug.startDebugging(session.workspaceFolder, config ?? name)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = this.onDidSessionStop(async () => {\n\t\t\tstopListener.dispose();\n\t\t\tthis.disposables.delete(stopListener);\n\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t});\n\t\tthis.disposables.add(stopListener);\n\t}\n\n\tprivate catchStartedDebugSession(predicate: (session: vscode.DebugSession) => boolean, cancellationToken: vscode.CancellationToken): Promise<vscode.DebugSession | undefined> {\n\t\treturn new Promise<vscode.DebugSession | undefined>(_resolve => {\n\t\t\tconst done = (value?: vscode.DebugSession) => {\n\t\t\t\tlistener.dispose();\n\t\t\t\tcancellationListener.dispose();\n\t\t\t\tthis.disposables.delete(listener);\n\t\t\t\tthis.disposables.delete(cancellationListener);\n\t\t\t\t_resolve(value);\n\t\t\t};\n\n\t\t\tconst cancellationListener = cancellationToken.onCancellationRequested(done);\n\t\t\tconst listener = vscode.debug.onDidStartDebugSession(session => {\n\t\t\t\tif (predicate(session)) {\n\t\t\t\t\tdone(session);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// In case the debug session of interest was never caught anyhow.\n\t\t\tthis.disposables.add(listener);\n\t\t\tthis.disposables.add(cancellationListener);\n\t\t});\n\t}\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tcontext.subscriptions.push(vscode.debug.onDidStartDebugSession(session => {\n\t\tif (session.configuration.serverReadyAction) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tServerReadyDetector.startListeningTerminalData();\n\t\t\t}\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.debug.onDidTerminateDebugSession(session => {\n\t\tServerReadyDetector.stop(session);\n\t}));\n\n\tconst trackers = new Set<string>();\n\n\tcontext.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('*', {\n\t\tresolveDebugConfigurationWithSubstitutedVariables(_folder: vscode.WorkspaceFolder | undefined, debugConfiguration: vscode.DebugConfiguration) {\n\t\t\tif (debugConfiguration.type && debugConfiguration.serverReadyAction) {\n\t\t\t\tif (!trackers.has(debugConfiguration.type)) {\n\t\t\t\t\ttrackers.add(debugConfiguration.type);\n\t\t\t\t\tstartTrackerForType(context, debugConfiguration.type);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn debugConfiguration;\n\t\t}\n\t}));\n}\n\nfunction startTrackerForType(context: vscode.ExtensionContext, type: string) {\n\n\t// scan debug console output for a PORT message\n\tcontext.subscriptions.push(vscode.debug.registerDebugAdapterTrackerFactory(type, {\n\t\tcreateDebugAdapterTracker(session: vscode.DebugSession) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tlet runInTerminalRequestSeq: number | undefined;\n\t\t\t\treturn {\n\t\t\t\t\tonDidSendMessage: m => {\n\t\t\t\t\t\tif (m.type === 'event' && m.event === 'output' && m.body) {\n\t\t\t\t\t\t\tswitch (m.body.category) {\n\t\t\t\t\t\t\t\tcase 'console':\n\t\t\t\t\t\t\t\tcase 'stderr':\n\t\t\t\t\t\t\t\tcase 'stdout':\n\t\t\t\t\t\t\t\t\tif (m.body.output) {\n\t\t\t\t\t\t\t\t\t\tdetector.detectPattern(m.body.output);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m.type === 'request' && m.command === 'runInTerminal' && m.arguments) {\n\t\t\t\t\t\t\tif (m.arguments.kind === 'integrated') {\n\t\t\t\t\t\t\t\trunInTerminalRequestSeq = m.seq; // remember this to find matching response\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonWillReceiveMessage: m => {\n\t\t\t\t\t\tif (runInTerminalRequestSeq && m.type === 'response' && m.command === 'runInTerminal' && m.body && runInTerminalRequestSeq === m.request_seq) {\n\t\t\t\t\t\t\trunInTerminalRequestSeq = undefined;\n\t\t\t\t\t\t\tServerReadyDetector.rememberShellPid(session, m.body.shellProcessId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}));\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","CSI_SEQUENCE","Trigger","_fired","this","fire","ServerReadyDetector","vscode","Disposable","session","configuration","serverReadyAction","detector","detectors","get","set","delete","sessionStopped","dispose","pid","shellPid","terminalDataListener","window","onDidWriteTerminalData","async","e","terminal","processId","str","replace","removeAnsiEscapeCodes","data","detectPattern","super","internalDispose","stoppedEmitter","EventEmitter","onDidSessionStop","event","disposables","Set","parentSession","trigger","start","regexp","RegExp","pattern","forEach","d","clear","s","hasFired","matches","exec","length","openExternalWithString","captureString","args","uri","format","uriFormat","indexOf","errMsg","l10n","t","showErrorMessage","modal","then","_","test","split","util","openExternalWithUri","action","env","openExternal","Uri","parse","debugWithBrowser","config","startDebugSession","name","type","killOnServerStop","startBrowserDebugSession","trackerId","randomUUID","cts","CancellationTokenSource","newSessionPromise","catchStartedDebugSession","_debugServerReadySessionId","token","cancel","createdSession","stopListener","debug","stopDebugging","add","startDebugging","workspaceFolder","request","url","webRoot","x","predicate","cancellationToken","Promise","_resolve","done","value","listener","cancellationListener","onCancellationRequested","onDidStartDebugSession","Map","context","subscriptions","push","startListeningTerminalData","onDidTerminateDebugSession","stop","trackers","registerDebugConfigurationProvider","resolveDebugConfigurationWithSubstitutedVariables","_folder","debugConfiguration","has","registerDebugAdapterTrackerFactory","createDebugAdapterTracker","runInTerminalRequestSeq","onDidSendMessage","m","body","category","output","command","arguments","kind","seq","onWillReceiveMessage","request_seq","rememberShellPid","shellProcessId","startTrackerForType"],"sourceRoot":""}