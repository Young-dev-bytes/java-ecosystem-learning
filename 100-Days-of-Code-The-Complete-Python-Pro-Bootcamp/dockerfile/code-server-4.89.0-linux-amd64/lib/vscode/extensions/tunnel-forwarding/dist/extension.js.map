{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://tunnel-forwarding/./src/deferredPromise.ts","webpack://tunnel-forwarding/./src/split.ts","webpack://tunnel-forwarding/external commonjs \"vscode\"","webpack://tunnel-forwarding/external node-commonjs \"child_process\"","webpack://tunnel-forwarding/external node-commonjs \"path\"","webpack://tunnel-forwarding/external node-commonjs \"stream\"","webpack://tunnel-forwarding/webpack/bootstrap","webpack://tunnel-forwarding/./src/extension.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport type ValueCallback<T = unknown> = (value: T | Promise<T>) => void;\n\nconst enum DeferredOutcome {\n\tResolved,\n\tRejected\n}\n\n/**\n * Copied from src\\vs\\base\\common\\async.ts\n */\nexport class DeferredPromise<T> {\n\n\tprivate completeCallback!: ValueCallback<T>;\n\tprivate errorCallback!: (err: unknown) => void;\n\tprivate outcome?: { outcome: DeferredOutcome.Rejected; value: any } | { outcome: DeferredOutcome.Resolved; value: T };\n\n\tpublic get isRejected() {\n\t\treturn this.outcome?.outcome === DeferredOutcome.Rejected;\n\t}\n\n\tpublic get isResolved() {\n\t\treturn this.outcome?.outcome === DeferredOutcome.Resolved;\n\t}\n\n\tpublic get isSettled() {\n\t\treturn !!this.outcome;\n\t}\n\n\tpublic get value() {\n\t\treturn this.outcome?.outcome === DeferredOutcome.Resolved ? this.outcome?.value : undefined;\n\t}\n\n\tpublic readonly p: Promise<T>;\n\n\tconstructor() {\n\t\tthis.p = new Promise<T>((c, e) => {\n\t\t\tthis.completeCallback = c;\n\t\t\tthis.errorCallback = e;\n\t\t});\n\t}\n\n\tpublic complete(value: T) {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.completeCallback(value);\n\t\t\tthis.outcome = { outcome: DeferredOutcome.Resolved, value };\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic error(err: unknown) {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.errorCallback(err);\n\t\t\tthis.outcome = { outcome: DeferredOutcome.Rejected, value: err };\n\t\t\tresolve();\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Transform } from 'stream';\n\nexport const splitNewLines = () => new StreamSplitter('\\n'.charCodeAt(0));\n\n/**\n * Copied and simplified from src\\vs\\base\\node\\nodeStreams.ts\n *\n * Exception: does not include the split character in the output.\n */\nexport class StreamSplitter extends Transform {\n\tprivate buffer: Buffer | undefined;\n\n\tconstructor(private readonly splitter: number) {\n\t\tsuper();\n\t}\n\n\toverride _transform(chunk: Buffer, _encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n\t\tif (!this.buffer) {\n\t\t\tthis.buffer = chunk;\n\t\t} else {\n\t\t\tthis.buffer = Buffer.concat([this.buffer, chunk]);\n\t\t}\n\n\t\tlet offset = 0;\n\t\twhile (offset < this.buffer.length) {\n\t\t\tconst index = this.buffer.indexOf(this.splitter, offset);\n\t\t\tif (index === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.push(this.buffer.subarray(offset, index));\n\t\t\toffset = index + 1;\n\t\t}\n\n\t\tthis.buffer = offset === this.buffer.length ? undefined : this.buffer.subarray(offset);\n\t\tcallback();\n\t}\n\n\toverride _flush(callback: (error?: Error | null, data?: any) => void): void {\n\t\tif (this.buffer) {\n\t\t\tthis.push(this.buffer);\n\t\t}\n\n\t\tcallback();\n\t}\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChildProcessWithoutNullStreams, spawn } from 'child_process';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\nimport { DeferredPromise } from './deferredPromise';\nimport { splitNewLines } from './split';\n\nexport const enum TunnelPrivacyId {\n\tPrivate = 'private',\n\tPublic = 'public',\n}\n\n/**\n * Timeout after the last port forwarding is disposed before we'll tear down\n * the CLI. This is primarily used since privacy changes to port will appear\n * as a dispose+re-create call, and we don't want to have to restart the CLI.\n */\nconst CLEANUP_TIMEOUT = 10_000;\n\nconst cliPath = process.env.VSCODE_FORWARDING_IS_DEV\n\t? path.join(__dirname, '../../../cli/target/debug/code')\n\t: path.join(\n\t\tvscode.env.appRoot,\n\t\tprocess.platform === 'darwin' ? 'bin' : '../../bin',\n\t\tvscode.env.appQuality === 'stable' ? 'code-tunnel' : 'code-tunnel-insiders',\n\t) + (process.platform === 'win32' ? '.exe' : '');\n\nclass Tunnel implements vscode.Tunnel {\n\tprivate readonly disposeEmitter = new vscode.EventEmitter<void>();\n\tpublic readonly onDidDispose = this.disposeEmitter.event;\n\tpublic localAddress!: string;\n\n\tconstructor(\n\t\tpublic readonly remoteAddress: { port: number; host: string },\n\t\tpublic readonly privacy: TunnelPrivacyId,\n\t) { }\n\n\tpublic setPortFormat(formatString: string) {\n\t\tthis.localAddress = formatString.replace('{port}', String(this.remoteAddress.port));\n\t}\n\n\tdispose() {\n\t\tthis.disposeEmitter.fire();\n\t}\n}\n\nconst enum State {\n\tStarting,\n\tActive,\n\tInactive,\n\tError,\n}\n\ntype StateT =\n\t| { state: State.Inactive }\n\t| { state: State.Starting; process: ChildProcessWithoutNullStreams; cleanupTimeout?: NodeJS.Timeout }\n\t| { state: State.Active; portFormat: string; process: ChildProcessWithoutNullStreams; cleanupTimeout?: NodeJS.Timeout }\n\t| { state: State.Error; error: string };\n\nexport async function activate(context: vscode.ExtensionContext) {\n\tif (vscode.env.remoteAuthority) {\n\t\treturn; // forwarding is local-only at the moment\n\t}\n\n\tconst logger = new Logger(vscode.l10n.t('Port Forwarding'));\n\tconst provider = new TunnelProvider(logger, context);\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('tunnel-forwarding.showLog', () => logger.show()),\n\t\tvscode.commands.registerCommand('tunnel-forwarding.restart', () => provider.restart()),\n\n\t\tprovider.onDidStateChange(s => {\n\t\t\tvscode.commands.executeCommand('setContext', 'tunnelForwardingIsRunning', s.state !== State.Inactive);\n\t\t}),\n\n\t\tawait vscode.workspace.registerTunnelProvider(\n\t\t\tprovider,\n\t\t\t{\n\t\t\t\ttunnelFeatures: {\n\t\t\t\t\televation: false,\n\t\t\t\t\tprotocol: false,\n\t\t\t\t\tprivacyOptions: [\n\t\t\t\t\t\t{ themeIcon: 'globe', id: TunnelPrivacyId.Public, label: vscode.l10n.t('Public') },\n\t\t\t\t\t\t{ themeIcon: 'lock', id: TunnelPrivacyId.Private, label: vscode.l10n.t('Private') },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t),\n\t);\n}\n\nexport function deactivate() { }\n\nclass Logger {\n\tprivate outputChannel?: vscode.LogOutputChannel;\n\n\tconstructor(private readonly label: string) { }\n\n\tpublic show(): void {\n\t\treturn this.outputChannel?.show();\n\t}\n\n\tpublic clear() {\n\t\tthis.outputChannel?.clear();\n\t}\n\n\tpublic log(\n\t\tlogLevel: 'trace' | 'debug' | 'info' | 'warn' | 'error',\n\t\tmessage: string,\n\t\t...args: unknown[]\n\t) {\n\t\tif (!this.outputChannel) {\n\t\t\tthis.outputChannel = vscode.window.createOutputChannel(this.label, { log: true });\n\t\t\tvscode.commands.executeCommand('setContext', 'tunnelForwardingHasLog', true);\n\t\t}\n\t\tthis.outputChannel[logLevel](message, ...args);\n\t}\n}\n\nconst didWarnPublicKey = 'didWarnPublic';\n\nclass TunnelProvider implements vscode.TunnelProvider {\n\tprivate readonly tunnels = new Set<Tunnel>();\n\tprivate readonly stateChange = new vscode.EventEmitter<StateT>();\n\tprivate _state: StateT = { state: State.Inactive };\n\n\tprivate get state(): StateT {\n\t\treturn this._state;\n\t}\n\n\tprivate set state(state: StateT) {\n\t\tthis._state = state;\n\t\tthis.stateChange.fire(state);\n\t}\n\n\tpublic readonly onDidStateChange = this.stateChange.event;\n\n\tconstructor(private readonly logger: Logger, private readonly context: vscode.ExtensionContext) { }\n\n\t/** @inheritdoc */\n\tpublic async provideTunnel(tunnelOptions: vscode.TunnelOptions): Promise<vscode.Tunnel | undefined> {\n\t\tif (tunnelOptions.privacy === TunnelPrivacyId.Public) {\n\t\t\tif (!(await this.consentPublicPort(tunnelOptions.remoteAddress.port))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst tunnel = new Tunnel(\n\t\t\ttunnelOptions.remoteAddress,\n\t\t\t(tunnelOptions.privacy as TunnelPrivacyId) || TunnelPrivacyId.Private,\n\t\t);\n\n\t\tthis.tunnels.add(tunnel);\n\t\ttunnel.onDidDispose(() => {\n\t\t\tthis.tunnels.delete(tunnel);\n\t\t\tthis.updateActivePortsIfRunning();\n\t\t});\n\n\t\tswitch (this.state.state) {\n\t\t\tcase State.Error:\n\t\t\tcase State.Inactive:\n\t\t\t\tawait this.setupPortForwardingProcess();\n\t\t\t// fall through since state is now starting\n\t\t\tcase State.Starting:\n\t\t\t\tthis.updateActivePortsIfRunning();\n\t\t\t\treturn new Promise<Tunnel>((resolve, reject) => {\n\t\t\t\t\tconst l = this.stateChange.event(state => {\n\t\t\t\t\t\tif (state.state === State.Active) {\n\t\t\t\t\t\t\ttunnel.setPortFormat(state.portFormat);\n\t\t\t\t\t\t\tl.dispose();\n\t\t\t\t\t\t\tresolve(tunnel);\n\t\t\t\t\t\t} else if (state.state === State.Error) {\n\t\t\t\t\t\t\tl.dispose();\n\t\t\t\t\t\t\treject(new Error(state.error));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tcase State.Active:\n\t\t\t\ttunnel.setPortFormat(this.state.portFormat);\n\t\t\t\tthis.updateActivePortsIfRunning();\n\t\t\t\treturn tunnel;\n\t\t}\n\t}\n\n\t/** Re/starts the port forwarding system. */\n\tpublic async restart() {\n\t\tthis.killRunningProcess();\n\t\tawait this.setupPortForwardingProcess(); // will show progress\n\t\tthis.updateActivePortsIfRunning();\n\t}\n\n\tprivate async consentPublicPort(portNumber: number) {\n\t\tconst didWarn = this.context.globalState.get(didWarnPublicKey, false);\n\t\tif (didWarn) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst continueOpt = vscode.l10n.t('Continue');\n\t\tconst dontShowAgain = vscode.l10n.t(\"Don't show again\");\n\t\tconst r = await vscode.window.showWarningMessage(\n\t\t\tvscode.l10n.t(\"You're about to create a publicly forwarded port. Anyone on the internet will be able to connect to the service listening on port {0}. You should only proceed if this service is secure and non-sensitive.\", portNumber),\n\t\t\t{ modal: true },\n\t\t\tcontinueOpt,\n\t\t\tdontShowAgain,\n\t\t);\n\t\tif (r === continueOpt) {\n\t\t\t// continue\n\t\t} else if (r === dontShowAgain) {\n\t\t\tawait this.context.globalState.update(didWarnPublicKey, true);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate isInStateWithProcess(process: ChildProcessWithoutNullStreams) {\n\t\treturn (\n\t\t\t(this.state.state === State.Starting || this.state.state === State.Active) &&\n\t\t\tthis.state.process === process\n\t\t);\n\t}\n\n\tprivate killRunningProcess() {\n\t\tif (this.state.state === State.Starting || this.state.state === State.Active) {\n\t\t\tthis.logger.log('info', '[forwarding] no more ports, stopping forwarding CLI');\n\t\t\tthis.state.process.kill();\n\t\t\tthis.state = { state: State.Inactive };\n\t\t}\n\t}\n\n\tprivate updateActivePortsIfRunning() {\n\t\tif (this.state.state !== State.Starting && this.state.state !== State.Active) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ports = [...this.tunnels].map(t => ({ number: t.remoteAddress.port, privacy: t.privacy }));\n\t\tthis.state.process.stdin.write(`${JSON.stringify(ports)}\\n`);\n\n\t\tif (ports.length === 0 && !this.state.cleanupTimeout) {\n\t\t\tthis.state.cleanupTimeout = setTimeout(() => this.killRunningProcess(), CLEANUP_TIMEOUT);\n\t\t} else if (ports.length > 0 && this.state.cleanupTimeout) {\n\t\t\tclearTimeout(this.state.cleanupTimeout);\n\t\t\tthis.state.cleanupTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate async setupPortForwardingProcess() {\n\t\tconst session = await vscode.authentication.getSession('github', ['user:email', 'read:org'], {\n\t\t\tcreateIfNone: true,\n\t\t});\n\n\t\tconst args = [\n\t\t\t'--verbose',\n\t\t\t'tunnel',\n\t\t\t'forward-internal',\n\t\t\t'--provider',\n\t\t\t'github',\n\t\t\t'--access-token',\n\t\t\tsession.accessToken,\n\t\t];\n\n\t\tthis.logger.log('info', '[forwarding] starting CLI');\n\t\tconst child = spawn(cliPath, args, { stdio: 'pipe', env: { ...process.env, NO_COLOR: '1' } });\n\t\tthis.state = { state: State.Starting, process: child };\n\n\t\tconst progressP = new DeferredPromise<void>();\n\t\tvscode.window.withProgress(\n\t\t\t{\n\t\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\t\ttitle: vscode.l10n.t({\n\t\t\t\t\tcomment: ['do not change link format [Show Log](command), only change the text \"Show Log\"'],\n\t\t\t\t\tmessage: 'Starting port forwarding system ([Show Log]({0}))',\n\t\t\t\t\targs: ['command:tunnel-forwarding.showLog']\n\t\t\t\t}),\n\t\t\t},\n\t\t\t() => progressP.p,\n\t\t);\n\n\t\tlet lastPortFormat: string | undefined;\n\t\tchild.on('exit', status => {\n\t\t\tconst msg = `[forwarding] exited with code ${status}`;\n\t\t\tthis.logger.log('info', msg);\n\t\t\tprogressP.complete(); // make sure to clear progress on unexpected exit\n\t\t\tif (this.isInStateWithProcess(child)) {\n\t\t\t\tthis.state = { state: State.Error, error: msg };\n\t\t\t}\n\t\t});\n\n\t\tchild.on('error', err => {\n\t\t\tthis.logger.log('error', `[forwarding] ${err}`);\n\t\t\tprogressP.complete(); // make sure to clear progress on unexpected exit\n\t\t\tif (this.isInStateWithProcess(child)) {\n\t\t\t\tthis.state = { state: State.Error, error: String(err) };\n\t\t\t}\n\t\t});\n\n\t\tchild.stdout\n\t\t\t.pipe(splitNewLines())\n\t\t\t.on('data', line => this.logger.log('info', `[forwarding] ${line}`))\n\t\t\t.resume();\n\n\t\tchild.stderr\n\t\t\t.pipe(splitNewLines())\n\t\t\t.on('data', line => {\n\t\t\t\ttry {\n\t\t\t\t\tconst l: { port_format: string } = JSON.parse(line);\n\t\t\t\t\tif (l.port_format && l.port_format !== lastPortFormat) {\n\t\t\t\t\t\tthis.state = {\n\t\t\t\t\t\t\tstate: State.Active,\n\t\t\t\t\t\t\tportFormat: l.port_format, process: child,\n\t\t\t\t\t\t\tcleanupTimeout: 'cleanupTimeout' in this.state ? this.state.cleanupTimeout : undefined,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tprogressP.complete();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.log('error', `[forwarding] ${line}`);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.resume();\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tchild.on('spawn', resolve);\n\t\t\tchild.on('error', reject);\n\t\t});\n\t}\n}\n"],"names":["isRejected","this","outcome","isResolved","isSettled","value","undefined","constructor","p","Promise","c","e","completeCallback","errorCallback","complete","resolve","error","err","splitNewLines","StreamSplitter","charCodeAt","Transform","splitter","super","_transform","chunk","_encoding","callback","buffer","Buffer","concat","offset","length","index","indexOf","push","subarray","_flush","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","async","context","vscode","env","remoteAuthority","logger","Logger","l10n","t","provider","TunnelProvider","subscriptions","commands","registerCommand","show","restart","onDidStateChange","s","executeCommand","state","workspace","registerTunnelProvider","tunnelFeatures","elevation","protocol","privacyOptions","themeIcon","id","label","cliPath","process","VSCODE_FORWARDING_IS_DEV","path","join","__dirname","appRoot","platform","appQuality","Tunnel","remoteAddress","privacy","disposeEmitter","EventEmitter","onDidDispose","event","setPortFormat","formatString","localAddress","replace","String","port","dispose","fire","outputChannel","clear","log","logLevel","message","args","window","createOutputChannel","didWarnPublicKey","_state","stateChange","tunnels","Set","provideTunnel","tunnelOptions","consentPublicPort","tunnel","add","delete","updateActivePortsIfRunning","setupPortForwardingProcess","reject","l","portFormat","Error","killRunningProcess","portNumber","globalState","get","continueOpt","dontShowAgain","r","showWarningMessage","modal","update","isInStateWithProcess","kill","ports","map","number","stdin","write","JSON","stringify","cleanupTimeout","clearTimeout","setTimeout","authentication","getSession","createIfNone","accessToken","child","spawn","stdio","NO_COLOR","progressP","DeferredPromise","withProgress","location","ProgressLocation","Notification","title","comment","on","status","msg","stdout","pipe","line","resume","stderr","parse","port_format","lastPortFormat"],"sourceRoot":""}