{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://debug-server-ready/external commonjs \"vscode\"","webpack://debug-server-ready/external node-commonjs \"crypto\"","webpack://debug-server-ready/external node-commonjs \"util\"","webpack://debug-server-ready/webpack/bootstrap","webpack://debug-server-ready/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"crypto\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as util from 'util';\nimport { randomUUID } from 'crypto';\n\nconst PATTERN = 'listening on.* (https?://\\\\S+|[0-9]+)'; // matches \"listening on port 3000\" or \"Now listening on: https://localhost:5001\"\nconst URI_PORT_FORMAT = 'http://localhost:%s';\nconst URI_FORMAT = '%s';\nconst WEB_ROOT = '${workspaceFolder}';\n\ninterface ServerReadyAction {\n\tpattern: string;\n\taction?: 'openExternally' | 'debugWithChrome' | 'debugWithEdge' | 'startDebugging';\n\turiFormat?: string;\n\twebRoot?: string;\n\tname?: string;\n\tconfig?: vscode.DebugConfiguration;\n\tkillOnServerStop?: boolean;\n}\n\n// Escape codes, compiled from https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_\nconst CSI_SEQUENCE = /(:?\\x1b\\[|\\x9B)[=?>!]?[\\d;:]*[\"$#'* ]?[a-zA-Z@^`{}|~]/g;\n\n/**\n * Froms vs/base/common/strings.ts in core\n * @see https://github.com/microsoft/vscode/blob/22a2a0e833175c32a2005b977d7fbd355582e416/src/vs/base/common/strings.ts#L736\n */\nfunction removeAnsiEscapeCodes(str: string): string {\n\tif (str) {\n\t\tstr = str.replace(CSI_SEQUENCE, '');\n\t}\n\n\treturn str;\n}\n\nclass Trigger {\n\tprivate _fired = false;\n\n\tpublic get hasFired() {\n\t\treturn this._fired;\n\t}\n\n\tpublic fire() {\n\t\tthis._fired = true;\n\t}\n}\n\nclass ServerReadyDetector extends vscode.Disposable {\n\n\tprivate static detectors = new Map<vscode.DebugSession, ServerReadyDetector>();\n\tprivate static terminalDataListener: vscode.Disposable | undefined;\n\n\tprivate readonly stoppedEmitter = new vscode.EventEmitter<void>();\n\tprivate readonly onDidSessionStop = this.stoppedEmitter.event;\n\tprivate readonly disposables = new Set<vscode.Disposable>([]);\n\tprivate trigger: Trigger;\n\tprivate shellPid?: number;\n\tprivate regexp: RegExp;\n\n\tstatic start(session: vscode.DebugSession): ServerReadyDetector | undefined {\n\t\tif (session.configuration.serverReadyAction) {\n\t\t\tlet detector = ServerReadyDetector.detectors.get(session);\n\t\t\tif (!detector) {\n\t\t\t\tdetector = new ServerReadyDetector(session);\n\t\t\t\tServerReadyDetector.detectors.set(session, detector);\n\t\t\t}\n\t\t\treturn detector;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstatic stop(session: vscode.DebugSession): void {\n\t\tconst detector = ServerReadyDetector.detectors.get(session);\n\t\tif (detector) {\n\t\t\tServerReadyDetector.detectors.delete(session);\n\t\t\tdetector.sessionStopped();\n\t\t\tdetector.dispose();\n\t\t}\n\t}\n\n\tstatic rememberShellPid(session: vscode.DebugSession, pid: number) {\n\t\tconst detector = ServerReadyDetector.detectors.get(session);\n\t\tif (detector) {\n\t\t\tdetector.shellPid = pid;\n\t\t}\n\t}\n\n\tstatic async startListeningTerminalData() {\n\t\tif (!this.terminalDataListener) {\n\t\t\tthis.terminalDataListener = vscode.window.onDidWriteTerminalData(async e => {\n\n\t\t\t\t// first find the detector with a matching pid\n\t\t\t\tconst pid = await e.terminal.processId;\n\t\t\t\tconst str = removeAnsiEscapeCodes(e.data);\n\t\t\t\tfor (const [, detector] of this.detectors) {\n\t\t\t\t\tif (detector.shellPid === pid) {\n\t\t\t\t\t\tdetector.detectPattern(str);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if none found, try all detectors until one matches\n\t\t\t\tfor (const [, detector] of this.detectors) {\n\t\t\t\t\tif (detector.detectPattern(str)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate constructor(private session: vscode.DebugSession) {\n\t\tsuper(() => this.internalDispose());\n\n\t\t// Re-used the triggered of the parent session, if one exists\n\t\tif (session.parentSession) {\n\t\t\tthis.trigger = ServerReadyDetector.start(session.parentSession)?.trigger ?? new Trigger();\n\t\t} else {\n\t\t\tthis.trigger = new Trigger();\n\t\t}\n\n\t\tthis.regexp = new RegExp(session.configuration.serverReadyAction.pattern || PATTERN, 'i');\n\t}\n\n\tprivate internalDispose() {\n\t\tthis.disposables.forEach(d => d.dispose());\n\t\tthis.disposables.clear();\n\t}\n\n\tpublic sessionStopped() {\n\t\tthis.stoppedEmitter.fire();\n\t}\n\n\tdetectPattern(s: string): boolean {\n\t\tif (!this.trigger.hasFired) {\n\t\t\tconst matches = this.regexp.exec(s);\n\t\t\tif (matches && matches.length >= 1) {\n\t\t\t\tthis.openExternalWithString(this.session, matches.length > 1 ? matches[1] : '');\n\t\t\t\tthis.trigger.fire();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate openExternalWithString(session: vscode.DebugSession, captureString: string) {\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\n\t\tlet uri;\n\t\tif (captureString === '') {\n\t\t\t// nothing captured by reg exp -> use the uriFormat as the target uri without substitution\n\t\t\t// verify that format does not contain '%s'\n\t\t\tconst format = args.uriFormat || '';\n\t\t\tif (format.indexOf('%s') >= 0) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') uses a substitution placeholder but pattern did not capture anything.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = format;\n\t\t} else {\n\t\t\t// if no uriFormat is specified guess the appropriate format based on the captureString\n\t\t\tconst format = args.uriFormat || (/^[0-9]+$/.test(captureString) ? URI_PORT_FORMAT : URI_FORMAT);\n\t\t\t// verify that format only contains a single '%s'\n\t\t\tconst s = format.split('%s');\n\t\t\tif (s.length !== 2) {\n\t\t\t\tconst errMsg = vscode.l10n.t(\"Format uri ('{0}') must contain exactly one substitution placeholder.\", format);\n\t\t\t\tvscode.window.showErrorMessage(errMsg, { modal: true }).then(_ => undefined);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\turi = util.format(format, captureString);\n\t\t}\n\n\t\tthis.openExternalWithUri(session, uri);\n\t}\n\n\tprivate async openExternalWithUri(session: vscode.DebugSession, uri: string) {\n\n\t\tconst args: ServerReadyAction = session.configuration.serverReadyAction;\n\t\tswitch (args.action || 'openExternally') {\n\n\t\t\tcase 'openExternally':\n\t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(uri));\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithChrome':\n\t\t\t\tawait this.debugWithBrowser('pwa-chrome', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'debugWithEdge':\n\t\t\t\tawait this.debugWithBrowser('pwa-msedge', session, uri);\n\t\t\t\tbreak;\n\n\t\t\tcase 'startDebugging':\n\t\t\t\tif (args.config) {\n\t\t\t\t\tawait this.startDebugSession(session, args.config.name, args.config);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.startDebugSession(session, args.name || 'unspecified');\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// not supported\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async debugWithBrowser(type: string, session: vscode.DebugSession, uri: string) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait this.startBrowserDebugSession(type, session, uri);\n\t\t\treturn;\n\t\t}\n\n\t\tconst trackerId = randomUUID();\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.catchStartedDebugSession(session => session.configuration._debugServerReadySessionId === trackerId, cts.token);\n\n\t\tif (!await this.startBrowserDebugSession(type, session, uri, trackerId)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = this.onDidSessionStop(async () => {\n\t\t\tstopListener.dispose();\n\t\t\tthis.disposables.delete(stopListener);\n\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t});\n\t\tthis.disposables.add(stopListener);\n\t}\n\n\tprivate startBrowserDebugSession(type: string, session: vscode.DebugSession, uri: string, trackerId?: string) {\n\t\treturn vscode.debug.startDebugging(session.workspaceFolder, {\n\t\t\ttype,\n\t\t\tname: 'Browser Debug',\n\t\t\trequest: 'launch',\n\t\t\turl: uri,\n\t\t\twebRoot: session.configuration.serverReadyAction.webRoot || WEB_ROOT,\n\t\t\t_debugServerReadySessionId: trackerId,\n\t\t});\n\t}\n\n\t/**\n\t * Starts a debug session given a debug configuration name (saved in launch.json) or a debug configuration object.\n\t *\n\t * @param session The parent debugSession\n\t * @param name The name of the configuration to launch. If config it set, it assumes it is the same as config.name.\n\t * @param config [Optional] Instead of starting a debug session by debug configuration name, use a debug configuration object instead.\n\t */\n\tprivate async startDebugSession(session: vscode.DebugSession, name: string, config?: vscode.DebugConfiguration) {\n\t\tconst args = session.configuration.serverReadyAction as ServerReadyAction;\n\t\tif (!args.killOnServerStop) {\n\t\t\tawait vscode.debug.startDebugging(session.workspaceFolder, config ?? name);\n\t\t\treturn;\n\t\t}\n\n\t\tconst cts = new vscode.CancellationTokenSource();\n\t\tconst newSessionPromise = this.catchStartedDebugSession(x => x.name === name, cts.token);\n\n\t\tif (!await vscode.debug.startDebugging(session.workspaceFolder, config ?? name)) {\n\t\t\tcts.cancel();\n\t\t\tcts.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tconst createdSession = await newSessionPromise;\n\t\tcts.dispose();\n\n\t\tif (!createdSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stopListener = this.onDidSessionStop(async () => {\n\t\t\tstopListener.dispose();\n\t\t\tthis.disposables.delete(stopListener);\n\t\t\tawait vscode.debug.stopDebugging(createdSession);\n\t\t});\n\t\tthis.disposables.add(stopListener);\n\t}\n\n\tprivate catchStartedDebugSession(predicate: (session: vscode.DebugSession) => boolean, cancellationToken: vscode.CancellationToken): Promise<vscode.DebugSession | undefined> {\n\t\treturn new Promise<vscode.DebugSession | undefined>(_resolve => {\n\t\t\tconst done = (value?: vscode.DebugSession) => {\n\t\t\t\tlistener.dispose();\n\t\t\t\tcancellationListener.dispose();\n\t\t\t\tthis.disposables.delete(listener);\n\t\t\t\tthis.disposables.delete(cancellationListener);\n\t\t\t\t_resolve(value);\n\t\t\t};\n\n\t\t\tconst cancellationListener = cancellationToken.onCancellationRequested(done);\n\t\t\tconst listener = vscode.debug.onDidStartDebugSession(session => {\n\t\t\t\tif (predicate(session)) {\n\t\t\t\t\tdone(session);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// In case the debug session of interest was never caught anyhow.\n\t\t\tthis.disposables.add(listener);\n\t\t\tthis.disposables.add(cancellationListener);\n\t\t});\n\t}\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tcontext.subscriptions.push(vscode.debug.onDidStartDebugSession(session => {\n\t\tif (session.configuration.serverReadyAction) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tServerReadyDetector.startListeningTerminalData();\n\t\t\t}\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.debug.onDidTerminateDebugSession(session => {\n\t\tServerReadyDetector.stop(session);\n\t}));\n\n\tconst trackers = new Set<string>();\n\n\tcontext.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('*', {\n\t\tresolveDebugConfigurationWithSubstitutedVariables(_folder: vscode.WorkspaceFolder | undefined, debugConfiguration: vscode.DebugConfiguration) {\n\t\t\tif (debugConfiguration.type && debugConfiguration.serverReadyAction) {\n\t\t\t\tif (!trackers.has(debugConfiguration.type)) {\n\t\t\t\t\ttrackers.add(debugConfiguration.type);\n\t\t\t\t\tstartTrackerForType(context, debugConfiguration.type);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn debugConfiguration;\n\t\t}\n\t}));\n}\n\nfunction startTrackerForType(context: vscode.ExtensionContext, type: string) {\n\n\t// scan debug console output for a PORT message\n\tcontext.subscriptions.push(vscode.debug.registerDebugAdapterTrackerFactory(type, {\n\t\tcreateDebugAdapterTracker(session: vscode.DebugSession) {\n\t\t\tconst detector = ServerReadyDetector.start(session);\n\t\t\tif (detector) {\n\t\t\t\tlet runInTerminalRequestSeq: number | undefined;\n\t\t\t\treturn {\n\t\t\t\t\tonDidSendMessage: m => {\n\t\t\t\t\t\tif (m.type === 'event' && m.event === 'output' && m.body) {\n\t\t\t\t\t\t\tswitch (m.body.category) {\n\t\t\t\t\t\t\t\tcase 'console':\n\t\t\t\t\t\t\t\tcase 'stderr':\n\t\t\t\t\t\t\t\tcase 'stdout':\n\t\t\t\t\t\t\t\t\tif (m.body.output) {\n\t\t\t\t\t\t\t\t\t\tdetector.detectPattern(m.body.output);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m.type === 'request' && m.command === 'runInTerminal' && m.arguments) {\n\t\t\t\t\t\t\tif (m.arguments.kind === 'integrated') {\n\t\t\t\t\t\t\t\trunInTerminalRequestSeq = m.seq; // remember this to find matching response\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonWillReceiveMessage: m => {\n\t\t\t\t\t\tif (runInTerminalRequestSeq && m.type === 'response' && m.command === 'runInTerminal' && m.body && runInTerminalRequestSeq === m.request_seq) {\n\t\t\t\t\t\t\trunInTerminalRequestSeq = undefined;\n\t\t\t\t\t\t\tServerReadyDetector.rememberShellPid(session, m.body.shellProcessId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\t}));\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","subscriptions","push","vscode","debug","onDidStartDebugSession","session","configuration","serverReadyAction","ServerReadyDetector","start","startListeningTerminalData","onDidTerminateDebugSession","stop","trackers","Set","registerDebugConfigurationProvider","resolveDebugConfigurationWithSubstitutedVariables","_folder","debugConfiguration","type","has","add","registerDebugAdapterTrackerFactory","createDebugAdapterTracker","detector","runInTerminalRequestSeq","onDidSendMessage","m","event","body","category","output","detectPattern","command","arguments","kind","seq","onWillReceiveMessage","request_seq","rememberShellPid","shellProcessId","startTrackerForType","CSI_SEQUENCE","Trigger","_fired","hasFired","this","fire","Disposable","detectors","get","set","delete","sessionStopped","dispose","pid","shellPid","terminalDataListener","window","onDidWriteTerminalData","async","e","terminal","processId","str","replace","removeAnsiEscapeCodes","data","super","internalDispose","stoppedEmitter","EventEmitter","onDidSessionStop","disposables","parentSession","trigger","regexp","RegExp","pattern","forEach","d","clear","s","matches","exec","length","openExternalWithString","captureString","args","uri","format","uriFormat","indexOf","errMsg","l10n","t","showErrorMessage","modal","then","_","test","split","util","openExternalWithUri","action","env","openExternal","Uri","parse","debugWithBrowser","config","startDebugSession","name","killOnServerStop","startBrowserDebugSession","trackerId","randomUUID","cts","CancellationTokenSource","newSessionPromise","catchStartedDebugSession","_debugServerReadySessionId","token","cancel","createdSession","stopListener","stopDebugging","startDebugging","workspaceFolder","request","url","webRoot","x","predicate","cancellationToken","Promise","_resolve","done","value","listener","cancellationListener","onCancellationRequested","Map"],"sourceRoot":""}